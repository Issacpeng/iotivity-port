<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\HuaweiLiteOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\HuaweiLiteOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue May 02 18:01:09 2017
<BR><P>
<H3>Maximum Stack Usage =       1032 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
periodic_observe_handler &rArr; coap_notify_observers &rArr; coap_separate_accept &rArr; coap_serialize_message &rArr; coap_serialize_array_option &rArr; coap_set_option_header
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f7]">LOS_StartToRun</a>
 <LI><a href="#[2d5]">LOS_IntNumGet</a>
 <LI><a href="#[2f1]">osDisableIRQ</a>
 <LI><a href="#[bf]">LOS_IntLock</a>
 <LI><a href="#[339]">LOS_IntUnLock</a>
 <LI><a href="#[c0]">LOS_IntRestore</a>
 <LI><a href="#[ee]">osTaskSchedule</a>
 <LI><a href="#[4]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SVC_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1c7]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c7]">netconn_drain</a><BR>
 <LI><a href="#[143]">call_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[144]">exit_process</a><BR>
 <LI><a href="#[262]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[263]">lwip_sendto</a><BR>
 <LI><a href="#[131]">advance_recursive</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[131]">advance_recursive</a><BR>
 <LI><a href="#[2ab]">oc_parse_rep_value</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ab]">oc_parse_rep_value</a><BR>
 <LI><a href="#[298]">oc_free_rep</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[298]">oc_free_rep</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from gd32f4xx_it.o(i.BusFault_Handler) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[28]">CAN0_EWMC_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[26]">CAN0_RX0_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[27]">CAN0_RX1_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[25]">CAN0_TX_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[54]">CAN1_EWMC_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[52]">CAN1_RX0_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[53]">CAN1_RX1_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[51]">CAN1_TX_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[60]">DCI_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[1d]">DMA0_Channel0_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[1e]">DMA0_Channel1_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[1f]">DMA0_Channel2_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[20]">DMA0_Channel3_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[21]">DMA0_Channel4_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[22]">DMA0_Channel5_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[23]">DMA0_Channel6_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[41]">DMA0_Channel7_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[4a]">DMA1_Channel0_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[4b]">DMA1_Channel1_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[4c]">DMA1_Channel2_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[4d]">DMA1_Channel3_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[4e]">DMA1_Channel4_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[56]">DMA1_Channel5_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[57]">DMA1_Channel6_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[58]">DMA1_Channel7_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[4f]">ENET_IRQHandler</a> from gd32f4xx_it.o(i.ENET_IRQHandler) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[50]">ENET_WKUP_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[42]">EXMC_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[3a]">EXTI10_15_IRQHandler</a> from los_bsp_key.o(i.EXTI10_15_IRQHandler) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[29]">EXTI5_9_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[16]">FMC_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[62]">FPU_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from gd32f4xx_it.o(i.HardFault_Handler) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[32]">I2C0_ER_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[31]">I2C0_EV_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[34]">I2C1_ER_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[33]">I2C1_EV_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[5b]">I2C2_ER_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[5a]">I2C2_EV_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[6a]">IPA_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[13]">LVD_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from gd32f4xx_it.o(i.MemManage_Handler) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from gd32f4xx_it.o(i.NMI_Handler) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from los_dispatch_keil.o(.text) referenced 2 times from los_hwi.o(.vector.bss)
 <LI><a href="#[4]">PendSV_Handler</a> from los_dispatch_keil.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[17]">RCU_CTC_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[3b]">RTC_Alarm_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[15]">RTC_WKUP_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_gd32f4xx.o(.text) referenced 2 times from los_hwi.o(.vector.bss)
 <LI><a href="#[2]">Reset_Handler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[43]">SDIO_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[35]">SPI0_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[45]">SPI2_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[65]">SPI3_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[66]">SPI4_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[67]">SPI5_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from los_bsp_adapter.o(i.SysTick_Handler) referenced 2 times from los_hwi.o(.vector.bss)
 <LI><a href="#[5]">SysTick_Handler</a> from los_bsp_adapter.o(i.SysTick_Handler) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_gd32f4xx.o(i.SystemInit) referenced from startup_gd32f4xx.o(.text)
 <LI><a href="#[14]">TAMPER_STAMP_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[2a]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[2d]">TIMER0_CC_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[2c]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[2b]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[2e]">TIMER1_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[2f]">TIMER2_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[30]">TIMER3_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[44]">TIMER4_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[48]">TIMER5_DAC_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[49]">TIMER6_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[3d]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[40]">TIMER7_CC_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[3f]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[3e]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[69]">TLI_ER_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[68]">TLI_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[61]">TRNG_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[46]">UART3_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[47]">UART4_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[63]">UART6_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[64]">UART7_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[37]">USART0_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[59]">USART5_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[55]">USBFS_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[3c]">USBFS_WKUP_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[5d]">USBHS_EP1_In_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[5c]">USBHS_EP1_Out_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[5f]">USBHS_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[5e]">USBHS_WKUP_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from gd32f4xx_it.o(i.UsageFault_Handler) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[12]">WWDGT_IRQHandler</a> from startup_gd32f4xx.o(.text) referenced from startup_gd32f4xx.o(RESET)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f4xx.o(.text)
 <LI><a href="#[6f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[9c]">app_init</a> from simpleserver.o(i.app_init) referenced from simpleserver.o(.constdata)
 <LI><a href="#[73]">arp_timer</a> from lwip_timers.o(i.arp_timer) referenced from lwip_timers.o(i.arp_timer)
 <LI><a href="#[73]">arp_timer</a> from lwip_timers.o(i.arp_timer) referenced from lwip_timers.o(i.sys_timeouts_init)
 <LI><a href="#[74]">dhcp_timer_coarse</a> from lwip_timers.o(i.dhcp_timer_coarse) referenced from lwip_timers.o(i.dhcp_timer_coarse)
 <LI><a href="#[74]">dhcp_timer_coarse</a> from lwip_timers.o(i.dhcp_timer_coarse) referenced from lwip_timers.o(i.sys_timeouts_init)
 <LI><a href="#[75]">dhcp_timer_fine</a> from lwip_timers.o(i.dhcp_timer_fine) referenced from lwip_timers.o(i.dhcp_timer_fine)
 <LI><a href="#[75]">dhcp_timer_fine</a> from lwip_timers.o(i.dhcp_timer_fine) referenced from lwip_timers.o(i.sys_timeouts_init)
 <LI><a href="#[83]">do_bind</a> from api_msg.o(i.do_bind) referenced from api_lib.o(i.netconn_bind)
 <LI><a href="#[84]">do_delconn</a> from api_msg.o(i.do_delconn) referenced from api_lib.o(i.netconn_delete)
 <LI><a href="#[85]">do_getaddr</a> from api_msg.o(i.do_getaddr) referenced from api_lib.o(i.netconn_getaddr)
 <LI><a href="#[86]">do_newconn</a> from api_msg.o(i.do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[87]">do_recv</a> from api_msg.o(i.do_recv) referenced from api_lib.o(i.netconn_recv_data)
 <LI><a href="#[87]">do_recv</a> from api_msg.o(i.do_recv) referenced from api_lib.o(i.netconn_recved)
 <LI><a href="#[88]">do_send</a> from api_msg.o(i.do_send) referenced from api_lib.o(i.netconn_send)
 <LI><a href="#[89]">do_write</a> from api_msg.o(i.do_write) referenced from api_lib.o(i.netconn_write_partly)
 <LI><a href="#[78]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[78]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[79]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[81]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from netconf.o(i.lwip_stack_init)
 <LI><a href="#[7d]">ethernetif_input</a> from ethernetif.o(i.ethernetif_input) referenced from ethernetif.o(i.low_level_init)
 <LI><a href="#[7f]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_socket)
 <LI><a href="#[6e]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[95]">get_light</a> from simpleserver.o(i.get_light) referenced from simpleserver.o(i.register_resources)
 <LI><a href="#[7b]">igmp_timer</a> from lwip_timers.o(i.igmp_timer) referenced from lwip_timers.o(i.igmp_timer)
 <LI><a href="#[7b]">igmp_timer</a> from lwip_timers.o(i.igmp_timer) referenced from lwip_timers.o(i.sys_timeouts_init)
 <LI><a href="#[82]">init_task</a> from main.o(i.init_task) referenced from main.o(i.main)
 <LI><a href="#[71]">iterate_noop</a> from cborparser.o(i.iterate_noop) referenced from cborparser.o(i._cbor_value_copy_string)
 <LI><a href="#[7c]">led_task</a> from main.o(i.led_task) referenced from main.o(i.init_task)
 <LI><a href="#[7a]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[7e]">lwip_setsockopt_internal</a> from sockets.o(i.lwip_setsockopt_internal) referenced from sockets.o(i.lwip_setsockopt)
 <LI><a href="#[6b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[70]">memcpy</a> from memmove.o(.text) referenced from cborparser.o(i._cbor_value_copy_string)
 <LI><a href="#[8a]">network_event_thread</a> from ipadapter.o(i.network_event_thread) referenced from ipadapter.o(i.oc_connectivity_init)
 <LI><a href="#[8b]">oc_core_device_handler</a> from oc_core_res.o(i.oc_core_device_handler) referenced from oc_core_res.o(i.oc_core_add_new_device)
 <LI><a href="#[8d]">oc_core_discovery_handler</a> from oc_discovery.o(i.oc_core_discovery_handler) referenced from oc_discovery.o(i.oc_create_discovery_resource)
 <LI><a href="#[8c]">oc_core_platform_handler</a> from oc_core_res.o(i.oc_core_platform_handler) referenced from oc_core_res.o(i.oc_core_init_platform)
 <LI><a href="#[8e]">oc_observe_notification_delayed</a> from oc_ri.o(i.oc_observe_notification_delayed) referenced from oc_ri.o(i.oc_ri_invoke_coap_entity_handler)
 <LI><a href="#[3]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced 14 times from los_hwi.o(.vector.bss)
 <LI><a href="#[3]">osHwiDefaultHandler</a> from los_hwi.o(i.osHwiDefaultHandler) referenced from los_hwi.o(i.osHwiInit)
 <LI><a href="#[8f]">osIdleTask</a> from los_task.o(i.osIdleTask) referenced from los_task.o(i.osIdleTaskCreate)
 <LI><a href="#[90]">osSwTmrTask</a> from los_swtmr.o(i.osSwTmrTask) referenced from los_swtmr.o(i.osSwTmrTaskCreate)
 <LI><a href="#[92]">osTaskEntry</a> from los_task.o(i.osTaskEntry) referenced from los_hw.o(i.osTskStackInit)
 <LI><a href="#[91]">osTaskExit</a> from los_hw.o(i.osTaskExit) referenced from los_hw.o(i.osTskStackInit)
 <LI><a href="#[72]">periodic_observe_handler</a> from oc_ri.o(i.periodic_observe_handler) referenced from oc_ri.o(i.add_periodic_observe_callback)
 <LI><a href="#[77]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[77]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[97]">post_light</a> from simpleserver.o(i.post_light) referenced from simpleserver.o(i.register_resources)
 <LI><a href="#[9]">process_thread_coap_engine</a> from engine.o(i.process_thread_coap_engine) referenced 2 times from engine.o(.data)
 <LI><a href="#[6]">process_thread_message_buffer_handler</a> from oc_buffer.o(i.process_thread_message_buffer_handler) referenced 2 times from oc_buffer.o(.data)
 <LI><a href="#[a]">process_thread_oc_etimer_process</a> from oc_etimer.o(i.process_thread_oc_etimer_process) referenced 2 times from oc_etimer.o(.data)
 <LI><a href="#[7]">process_thread_oc_network_events</a> from oc_network_events.o(i.process_thread_oc_network_events) referenced 2 times from oc_network_events.o(.data)
 <LI><a href="#[8]">process_thread_timed_callback_events</a> from oc_ri.o(i.process_thread_timed_callback_events) referenced 2 times from oc_ri.o(.data)
 <LI><a href="#[96]">put_light</a> from simpleserver.o(i.put_light) referenced from simpleserver.o(i.register_resources)
 <LI><a href="#[93]">recv_raw</a> from api_msg.o(i.recv_raw) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[98]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[94]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[9e]">register_resources</a> from simpleserver.o(i.register_resources) referenced from simpleserver.o(.constdata)
 <LI><a href="#[76]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.do_close_internal)
 <LI><a href="#[76]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[9d]">signal_event_loop</a> from simpleserver.o(i.signal_event_loop) referenced from simpleserver.o(.constdata)
 <LI><a href="#[99]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[80]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from netconf.o(i.lwip_stack_init)
 <LI><a href="#[9a]">tcpip_tcp_timer</a> from lwip_timers.o(i.tcpip_tcp_timer) referenced from lwip_timers.o(i.tcp_timer_needed)
 <LI><a href="#[9a]">tcpip_tcp_timer</a> from lwip_timers.o(i.tcpip_tcp_timer) referenced from lwip_timers.o(i.tcpip_tcp_timer)
 <LI><a href="#[9b]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(.text)
</UL>
<P><STRONG><a name="[333]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b2]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[334]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[335]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[336]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[337]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[338]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f7]"></a>LOS_StartToRun</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[2d5]"></a>LOS_IntNumGet</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>

<P><STRONG><a name="[2f1]"></a>osDisableIRQ</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskExit
</UL>

<P><STRONG><a name="[bf]"></a>LOS_IntLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventPoll
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>

<P><STRONG><a name="[339]"></a>LOS_IntUnLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>LOS_IntRestore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventPoll
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>

<P><STRONG><a name="[ee]"></a>osTaskSchedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> los_hwi.o(.vector.bss)
<LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> los_hwi.o(.vector.bss)
<LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIMER0_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER7_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TLI_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TLI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USBHS_EP1_In_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USBHS_EP1_Out_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USBHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USBHS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MS2Tick
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_transaction
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2b7]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_random_value
</UL>

<P><STRONG><a name="[2b6]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_random_init
</UL>

<P><STRONG><a name="[33a]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_copy_string_to_string_array
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_new_string
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_store_uri
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_platform_handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_device_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_observer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_empty_ack
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_token
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_message
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_array_option
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_new_transaction
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_to_buffer
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_payload
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_mmem_free
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_merge_multi_option
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
</UL>

<P><STRONG><a name="[70]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cborparser.o(i._cbor_value_copy_string)
</UL>
<P><STRONG><a name="[33d]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[33e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueCreate
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_message
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_message
</UL>

<P><STRONG><a name="[340]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[11b]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_copy_string_to_string_array
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_get_query_value
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_device_object
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_resource
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_new_string
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_string_array_add_item
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_store_uri
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_baseline_interface
</UL>

<P><STRONG><a name="[2be]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_get_query_nth_key_value
</UL>

<P><STRONG><a name="[178]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_token
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_client
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_handle_by_uri
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_mid
</UL>

<P><STRONG><a name="[20b]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_get_interface_mask
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_resource
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
</UL>

<P><STRONG><a name="[a7]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_get_query_value
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[341]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[342]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[343]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[344]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[345]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ab]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[346]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ENET_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.ENET_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ENET_IRQHandler &rArr; sys_sem_signal &rArr; LOS_SemPost &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_interrupt_flag_get
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_interrupt_flag_clear
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, los_bsp_key.o(i.EXTI10_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI10_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>LOS_Align</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, los_misc.o(i.LOS_Align))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[d7]"></a>LOS_DLnkInitMultiHead</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, los_multipledlinkhead.o(i.LOS_DLnkInitMultiHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LOS_DLnkInitMultiHead
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[ba]"></a>LOS_DLnkMultiHead</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, los_multipledlinkhead.o(i.LOS_DLnkMultiHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Log2
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSpitNode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFreeNode
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFindSuitableFreeBlock
</UL>

<P><STRONG><a name="[bc]"></a>LOS_EnableTick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, los_config.o(i.LOS_EnableTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LOS_EnableTick &rArr; osTickStart
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickStart
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[305]"></a>LOS_EventInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, los_event.o(i.LOS_EventInit))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserverstart
</UL>

<P><STRONG><a name="[be]"></a>LOS_EventPoll</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, los_event.o(i.LOS_EventPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LOS_EventPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
</UL>

<P><STRONG><a name="[c1]"></a>LOS_EventRead</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, los_event.o(i.LOS_EventRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LOS_EventRead &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventPoll
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserverstart
</UL>

<P><STRONG><a name="[c4]"></a>LOS_EventWrite</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, los_event.o(i.LOS_EventWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = LOS_EventWrite &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_event_loop
</UL>

<P><STRONG><a name="[c7]"></a>LOS_KernelInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, los_config.o(i.LOS_KernelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = LOS_KernelInit &rArr; osMain &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>LOS_MS2Tick</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, los_sys.o(i.LOS_MS2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LOS_MS2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[d0]"></a>LOS_MemAlloc</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, los_memory.o(i.LOS_MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueCreate
</UL>

<P><STRONG><a name="[d2]"></a>LOS_MemAllocAlign</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, los_memory.o(i.LOS_MemAllocAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[d3]"></a>LOS_MemFree</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, los_memory.o(i.LOS_MemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = LOS_MemFree &rArr; osMemCheckUsedNode &rArr; osMemIsNodeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFreeNode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemCheckUsedNode
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
</UL>

<P><STRONG><a name="[d6]"></a>LOS_MemInit</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, los_memory.o(i.LOS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = LOS_MemInit &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_DLnkMultiHead
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_DLnkInitMultiHead
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSetMagicNumAndTaskid
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
</UL>

<P><STRONG><a name="[da]"></a>LOS_MemboxAlloc</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, los_membox.o(i.LOS_MemboxAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LOS_MemboxAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[db]"></a>LOS_MemboxFree</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, los_membox.o(i.LOS_MemboxFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_MemboxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[dc]"></a>LOS_MemboxInit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, los_membox.o(i.LOS_MemboxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_MemboxInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
</UL>

<P><STRONG><a name="[dd]"></a>LOS_MuxCreate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, los_mux.o(i.LOS_MuxCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LOS_MuxCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_network_event_handler_mutex_init
</UL>

<P><STRONG><a name="[e1]"></a>LOS_MuxPend</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, los_mux.o(i.LOS_MuxPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = LOS_MuxPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserverstart
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_event_loop
</UL>

<P><STRONG><a name="[e3]"></a>LOS_MuxPost</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, los_mux.o(i.LOS_MuxPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = LOS_MuxPost &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserverstart
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_event_loop
</UL>

<P><STRONG><a name="[c2]"></a>LOS_PriqueueDequeue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, los_priqueue.o(i.LOS_PriqueueDequeue))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueuePend
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
</UL>

<P><STRONG><a name="[c6]"></a>LOS_PriqueueEnqueue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, los_priqueue.o(i.LOS_PriqueueEnqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWakeUp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[104]"></a>LOS_PriqueueSize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, los_priqueue.o(i.LOS_PriqueueSize))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>

<P><STRONG><a name="[ed]"></a>LOS_PriqueueTop</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, los_priqueue.o(i.LOS_PriqueueTop))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[e4]"></a>LOS_QueueCreate</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, los_queue.o(i.LOS_QueueCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LOS_QueueCreate &rArr; osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>

<P><STRONG><a name="[e7]"></a>LOS_QueueDelete</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, los_queue.o(i.LOS_QueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = LOS_QueueDelete &rArr; LOS_MemFree &rArr; osMemCheckUsedNode &rArr; osMemIsNodeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageDelete
</UL>

<P><STRONG><a name="[e9]"></a>LOS_QueueRead</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, los_queue.o(i.LOS_QueueRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWakeUp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueuePend
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[ec]"></a>LOS_QueueWrite</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, los_queue.o(i.LOS_QueueWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWakeUp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueuePend
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[b6]"></a>LOS_Schedule</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, los_hw.o(i.LOS_Schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueTop
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>LOS_SemCreate</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, los_sem.o(i.LOS_SemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LOS_SemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[f3]"></a>LOS_SemDelete</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, los_sem.o(i.LOS_SemDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LOS_SemDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[f4]"></a>LOS_SemPend</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, los_sem.o(i.LOS_SemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[f5]"></a>LOS_SemPost</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, los_sem.o(i.LOS_SemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = LOS_SemPost &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>

<P><STRONG><a name="[2f5]"></a>LOS_SetTickSycle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_hw_tick.o(i.LOS_SetTickSycle))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickStart
</UL>

<P><STRONG><a name="[f6]"></a>LOS_Start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, los_config.o(i.LOS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LOS_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_StartToRun
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>LOS_TaskCreate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, los_task.o(i.LOS_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueTop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_connectivity_init
</UL>

<P><STRONG><a name="[f9]"></a>LOS_TaskCreateOnly</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, los_task.o(i.LOS_TaskCreateOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Align
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[ff]"></a>LOS_TaskDelay</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, los_task.o(i.LOS_TaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageDelete
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[101]"></a>LOS_TaskDelete</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, los_task.o(i.LOS_TaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelete &rArr; LOS_MemFree &rArr; osMemCheckUsedNode &rArr; osMemIsNodeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueTop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_connectivity_shutdown
</UL>

<P><STRONG><a name="[102]"></a>LOS_TaskLock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, los_task.o(i.LOS_TaskLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LOS_TaskLock
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task
</UL>

<P><STRONG><a name="[103]"></a>LOS_TaskUnlock</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, los_task.o(i.LOS_TaskUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LOS_TaskUnlock &rArr; LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task
</UL>

<P><STRONG><a name="[100]"></a>LOS_TaskYield</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, los_task.o(i.LOS_TaskYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LOS_TaskYield &rArr; LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueSize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
</UL>

<P><STRONG><a name="[286]"></a>LOS_TickCountGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sys.o(i.LOS_TickCountGet))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_random_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_clock_time
</UL>

<P><STRONG><a name="[105]"></a>LOS_TickHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, los_hw_tick.o(i.LOS_TickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LOS_TickHandler &rArr; osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2d3]"></a>LosAdapIntInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, los_bsp_adapter.o(i.LosAdapIntInit))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiInit
</UL>

<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, los_bsp_adapter.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; LOS_TickHandler &rArr; osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> los_hwi.o(.vector.bss)
<LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[349]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[199]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_buffer
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserverstart
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_connectivity_init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_main_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_event_loop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_light
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_event_thread
</UL>

<P><STRONG><a name="[34a]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[34b]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[10a]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[34c]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[2d0]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_uuid_to_str
</UL>

<P><STRONG><a name="[34d]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[34e]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[110]"></a>__aeabi_assert</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abort.o(i.__aeabi_assert))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_enter_container
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_advance
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_decode_int64_internal
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_get_int
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_get_double
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_get_boolean
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_get_array_length
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_copy_text_string
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_copy_byte_string
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_leave_container
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparse_value
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterate_string_chunks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_internal
</UL>

<P><STRONG><a name="[2cd]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_buffer
</UL>

<P><STRONG><a name="[34f]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[350]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[351]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[352]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10d]"></a>_cbor_value_copy_string</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, cborparser.o(i._cbor_value_copy_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _cbor_value_copy_string &rArr; iterate_string_chunks &rArr; extract_length &rArr; extract_number &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterate_string_chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_calculate_string_length
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_copy_text_string
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_copy_byte_string
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_recursive
</UL>

<P><STRONG><a name="[10f]"></a>_cbor_value_decode_int64_internal</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, cborparser.o(i._cbor_value_decode_int64_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _cbor_value_decode_int64_internal &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get64
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get32
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_get_double
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_extract_int64_helper
</UL>

<P><STRONG><a name="[118]"></a>_oc_alloc_string_array</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, oc_helpers.o(i._oc_alloc_string_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _oc_alloc_string_array &rArr; oc_alloc_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_alloc_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_populate_resource
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_populate_resource_object
</UL>

<P><STRONG><a name="[11a]"></a>_oc_copy_string_to_string_array</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, oc_helpers.o(i._oc_copy_string_to_string_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _oc_copy_string_to_string_array &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_string_array_add_item
</UL>

<P><STRONG><a name="[11d]"></a>_oc_free_array</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, oc_helpers.o(i._oc_free_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _oc_free_array &rArr; oc_free &rArr; oc_mmem_free &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free_rep
</UL>

<P><STRONG><a name="[11f]"></a>_oc_new_array</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, oc_helpers.o(i._oc_new_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _oc_new_array &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
</UL>

<P><STRONG><a name="[2a6]"></a>_oc_signal_event_loop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oc_main.o(i._oc_signal_event_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _oc_signal_event_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_message
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_network_event
</UL>

<P><STRONG><a name="[121]"></a>_oc_string_array_add_item</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, oc_helpers.o(i._oc_string_array_add_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _oc_string_array_add_item &rArr; _oc_copy_string_to_string_array &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_copy_string_to_string_array
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_populate_resource
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_resource_bind_resource_type
</UL>

<P><STRONG><a name="[29d]"></a>abort_impl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abort.o(i.abort_impl))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_main_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_malloc
</UL>

<P><STRONG><a name="[145]"></a>cbor_encode_int</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, cborencoder.o(i.cbor_encode_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cbor_encode_int &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_number
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
</UL>

<P><STRONG><a name="[147]"></a>cbor_encode_simple_value</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cborencoder.o(i.cbor_encode_simple_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cbor_encode_simple_value &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_number
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
</UL>

<P><STRONG><a name="[148]"></a>cbor_encode_text_string</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cborencoder.o(i.cbor_encode_text_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cbor_encode_text_string &rArr; encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_string
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_device_object
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_resource
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_encode_interfaces_mask
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_baseline_interface
</UL>

<P><STRONG><a name="[14a]"></a>cbor_encode_uint</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, cborencoder.o(i.cbor_encode_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cbor_encode_uint &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_number
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_resource
</UL>

<P><STRONG><a name="[14b]"></a>cbor_encoder_close_container</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cborencoder.o(i.cbor_encoder_close_container))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cbor_encoder_close_container &rArr; append_byte_to_buffer &rArr; append_to_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_byte_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_device_object
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_discovery_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_resource
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_encode_interfaces_mask
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_payload
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_baseline_interface
</UL>

<P><STRONG><a name="[14c]"></a>cbor_encoder_create_array</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cborencoder.o(i.cbor_encoder_create_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cbor_encoder_create_array &rArr; create_container &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_container
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_device_object
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_discovery_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_resource
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_encode_interfaces_mask
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_baseline_interface
</UL>

<P><STRONG><a name="[14e]"></a>cbor_encoder_create_map</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cborencoder.o(i.cbor_encoder_create_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cbor_encoder_create_map &rArr; create_container &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_container
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_device_object
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_resource
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
</UL>

<P><STRONG><a name="[2b8]"></a>cbor_encoder_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cborencoder.o(i.cbor_encoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cbor_encoder_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_rep_new
</UL>

<P><STRONG><a name="[14f]"></a>cbor_parser_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cborparser.o(i.cbor_parser_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cbor_parser_init &rArr; preparse_value &rArr; get16 &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparse_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep
</UL>

<P><STRONG><a name="[151]"></a>cbor_value_advance</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cborparser.o(i.cbor_value_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = cbor_value_advance &rArr; advance_recursive &rArr;  advance_recursive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_recursive
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
</UL>

<P><STRONG><a name="[152]"></a>cbor_value_calculate_string_length</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cborparser.o(i.cbor_value_calculate_string_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cbor_value_calculate_string_length &rArr; _cbor_value_copy_string &rArr; iterate_string_chunks &rArr; extract_length &rArr; extract_number &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_copy_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
</UL>

<P><STRONG><a name="[134]"></a>cbor_value_enter_container</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, cborparser.o(i.cbor_value_enter_container))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cbor_value_enter_container &rArr; extract_number &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparse_value
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_number
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_is_container
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_recursive
</UL>

<P><STRONG><a name="[136]"></a>cbor_value_leave_container</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cborparser.o(i.cbor_value_leave_container))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cbor_value_leave_container &rArr; preparse_next_value &rArr; preparse_value &rArr; get16 &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparse_next_value
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_is_container
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_recursive
</UL>

<P><STRONG><a name="[15c]"></a>coap_check_transactions</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, transactions.o(i.coap_check_transactions))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = coap_check_transactions &rArr; coap_send_transaction &rArr; oc_etimer_restart &rArr; add_timer &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_head
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_expired
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_transaction
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_coap_engine
</UL>

<P><STRONG><a name="[160]"></a>coap_clear_transaction</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, transactions.o(i.coap_clear_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = coap_clear_transaction &rArr; oc_etimer_stop &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_free
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_message_unref
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_remove
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_transaction
</UL>

<P><STRONG><a name="[17e]"></a>coap_get_header_block1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, coap_1.o(i.coap_get_header_block1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coap_get_header_block1
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[17f]"></a>coap_get_header_block2</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, coap_1.o(i.coap_get_header_block2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coap_get_header_block2
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[2c7]"></a>coap_get_header_observe</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, coap_1.o(i.coap_get_header_observe))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[2c2]"></a>coap_get_header_uri_path</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, coap_1.o(i.coap_get_header_uri_path))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[2c3]"></a>coap_get_header_uri_query</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, coap_1.o(i.coap_get_header_uri_query))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[176]"></a>coap_get_mid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, coap_1.o(i.coap_get_mid))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[2c4]"></a>coap_get_payload</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, coap_1.o(i.coap_get_payload))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[164]"></a>coap_get_transaction_by_mid</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, transactions.o(i.coap_get_transaction_by_mid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coap_get_transaction_by_mid
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[165]"></a>coap_init_connection</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, coap_1.o(i.coap_init_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coap_init_connection &rArr; oc_random_value
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_random_value
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_coap_engine
</UL>

<P><STRONG><a name="[167]"></a>coap_init_message</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, coap_1.o(i.coap_init_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = coap_init_message
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_empty_ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[16b]"></a>coap_new_transaction</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, transactions.o(i.coap_new_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = coap_new_transaction &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_free
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_alloc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_allocate_message
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_add
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[16d]"></a>coap_notify_observers</STRONG> (Thumb, 446 bytes, Stack size 704 bytes, observe.o(i.coap_notify_observers))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = coap_notify_observers &rArr; coap_separate_accept &rArr; coap_serialize_message &rArr; coap_serialize_array_option &rArr; coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_head
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_status_code
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_payload
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_observe
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_content_format
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_status_code
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_rep_new
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_token
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_message
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_transaction
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_new_transaction
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_mid
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_observe_handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_observe_notification_delayed
</UL>

<P><STRONG><a name="[179]"></a>coap_observe_handler</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, observe.o(i.coap_observe_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = coap_observe_handler &rArr; add_observer &rArr; coap_remove_observer_handle_by_uri &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_token
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_observer
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[17b]"></a>coap_parse_message</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, coap_1.o(i.coap_parse_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = coap_parse_message &rArr; coap_merge_multi_option &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_int_option
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_merge_multi_option
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[17d]"></a>coap_receive</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, engine.o(i.coap_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = coap_receive &rArr; oc_ri_invoke_coap_entity_handler &rArr; oc_parse_rep &rArr; oc_parse_rep_value &rArr;  oc_parse_rep_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_mid
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_transaction_by_mid
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_clear_transaction
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_empty_ack
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_token
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_message
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_message
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_header_block2
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_header_block1
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_transaction
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_new_transaction
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_mid
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_coap_engine
</UL>

<P><STRONG><a name="[2ff]"></a>coap_register_as_transaction_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, transactions.o(i.coap_register_as_transaction_handler))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_coap_engine
</UL>

<P><STRONG><a name="[183]"></a>coap_remove_observer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, observe.o(i.coap_remove_observer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = coap_remove_observer &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_free
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_token
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_client
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_mid
</UL>

<P><STRONG><a name="[184]"></a>coap_remove_observer_by_client</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, observe.o(i.coap_remove_observer_by_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = coap_remove_observer_by_client &rArr; coap_remove_observer &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_head
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_transaction
</UL>

<P><STRONG><a name="[182]"></a>coap_remove_observer_by_mid</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, observe.o(i.coap_remove_observer_by_mid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = coap_remove_observer_by_mid &rArr; coap_remove_observer &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_head
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[17a]"></a>coap_remove_observer_by_token</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, observe.o(i.coap_remove_observer_by_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = coap_remove_observer_by_token &rArr; coap_remove_observer &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_head
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[181]"></a>coap_send_empty_ack</STRONG> (Thumb, 60 bytes, Stack size 184 bytes, engine.o(i.coap_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = coap_send_empty_ack &rArr; coap_serialize_message &rArr; coap_serialize_array_option &rArr; coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_allocate_message
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_message
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_message
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[185]"></a>coap_send_message</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, coap_1.o(i.coap_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = coap_send_message &rArr; oc_send_message &rArr; oc_process_post &rArr; oc_message_unref &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_empty_ack
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_transaction
</UL>

<P><STRONG><a name="[15f]"></a>coap_send_transaction</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, transactions.o(i.coap_send_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = coap_send_transaction &rArr; oc_etimer_restart &rArr; add_timer &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_random_value
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_message_add_ref
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_restart
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_client
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_clear_transaction
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_message
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_check_transactions
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[170]"></a>coap_separate_accept</STRONG> (Thumb, 250 bytes, Stack size 200 bytes, separate.o(i.coap_separate_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = coap_separate_accept &rArr; coap_serialize_message &rArr; coap_serialize_array_option &rArr; coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_alloc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_allocate_message
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_head
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_observe
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_item_next
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_token
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_message
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_message
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_clear
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[18b]"></a>coap_separate_clear</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, separate.o(i.coap_separate_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = coap_separate_clear &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_free
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
</UL>

<P><STRONG><a name="[177]"></a>coap_serialize_message</STRONG> (Thumb, 592 bytes, Stack size 40 bytes, coap_1.o(i.coap_serialize_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = coap_serialize_message &rArr; coap_serialize_array_option &rArr; coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_int_option
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_array_option
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_log_2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_empty_ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[174]"></a>coap_set_header_content_format</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, coap_1.o(i.coap_set_header_content_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_set_header_content_format
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[173]"></a>coap_set_header_observe</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, coap_1.o(i.coap_set_header_observe))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[2c9]"></a>coap_set_header_size1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, coap_1.o(i.coap_set_header_size1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_set_header_size1
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[171]"></a>coap_set_payload</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, coap_1.o(i.coap_set_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coap_set_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[172]"></a>coap_set_status_code</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, coap_1.o(i.coap_set_status_code))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[175]"></a>coap_set_token</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, coap_1.o(i.coap_set_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = coap_set_token &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[198]"></a>dhcp_arp_reply</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[1a3]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
</UL>

<P><STRONG><a name="[1b3]"></a>dhcp_fine_tmr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
</UL>

<P><STRONG><a name="[1b7]"></a>dhcp_release</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[1b9]"></a>dhcp_renew</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[83]"></a>do_bind</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, api_msg.o(i.do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_bind)
</UL>
<P><STRONG><a name="[84]"></a>do_delconn</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, api_msg.o(i.do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = do_delconn &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_delete)
</UL>
<P><STRONG><a name="[85]"></a>do_getaddr</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, api_msg.o(i.do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = do_getaddr &rArr; sys_sem_signal &rArr; LOS_SemPost &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[86]"></a>do_newconn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_msg.o(i.do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[87]"></a>do_recv</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, api_msg.o(i.do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_lib.o(i.netconn_recv_data)
<LI> api_lib.o(i.netconn_recved)
</UL>
<P><STRONG><a name="[88]"></a>do_send</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, api_msg.o(i.do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_send)
</UL>
<P><STRONG><a name="[89]"></a>do_write</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, api_msg.o(i.do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write_partly)
</UL>
<P><STRONG><a name="[1d7]"></a>enet_deinit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32f4xx_enet.o(i.enet_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enet_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_initpara_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
</UL>

<P><STRONG><a name="[248]"></a>enet_desc_information_get</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_desc_information_get))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[244]"></a>enet_descriptors_chain_init</STRONG> (Thumb, 162 bytes, Stack size 28 bytes, gd32f4xx_enet.o(i.enet_descriptors_chain_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = enet_descriptors_chain_init
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1db]"></a>enet_enable</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, gd32f4xx_enet.o(i.enet_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enet_enable &rArr; enet_tx_enable &rArr; enet_txfifo_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_tx_enable
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[249]"></a>enet_frame_receive</STRONG> (Thumb, 236 bytes, Stack size 12 bytes, gd32f4xx_enet.o(i.enet_frame_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = enet_frame_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[24a]"></a>enet_frame_transmit</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, gd32f4xx_enet.o(i.enet_frame_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enet_frame_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[1e5]"></a>enet_init</STRONG> (Thumb, 822 bytes, Stack size 56 bytes, gd32f4xx_enet.o(i.enet_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = enet_init &rArr; enet_phy_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_phy_write_read
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_phy_config
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_delay
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_default_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
</UL>

<P><STRONG><a name="[1ec]"></a>enet_initpara_config</STRONG> (Thumb, 350 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_initpara_config))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
</UL>

<P><STRONG><a name="[1da]"></a>enet_initpara_reset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_initpara_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_deinit
</UL>

<P><STRONG><a name="[1f0]"></a>enet_interrupt_enable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_system_setup
</UL>

<P><STRONG><a name="[b5]"></a>enet_interrupt_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>enet_interrupt_flag_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[243]"></a>enet_mac_address_set</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_mac_address_set))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1e6]"></a>enet_phy_config</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, gd32f4xx_enet.o(i.enet_phy_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = enet_phy_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_phy_write_read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_init
</UL>

<P><STRONG><a name="[1e9]"></a>enet_phy_write_read</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gd32f4xx_enet.o(i.enet_phy_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enet_phy_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_phy_config
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_init
</UL>

<P><STRONG><a name="[245]"></a>enet_rx_desc_immediate_receive_complete_interrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_rx_desc_immediate_receive_complete_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1dd]"></a>enet_rx_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_rx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_enable
</UL>

<P><STRONG><a name="[1eb]"></a>enet_software_reset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gd32f4xx_enet.o(i.enet_software_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enet_software_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
</UL>

<P><STRONG><a name="[1ee]"></a>enet_system_setup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f4xx_enet_eval.o(i.enet_system_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = enet_system_setup &rArr; enet_mac_dma_config &rArr; enet_init &rArr; enet_phy_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_interrupt_enable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_configuration
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task
</UL>

<P><STRONG><a name="[246]"></a>enet_transmit_checksum_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_transmit_checksum_config))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1dc]"></a>enet_tx_enable</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, gd32f4xx_enet.o(i.enet_tx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = enet_tx_enable &rArr; enet_txfifo_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_txfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_enable
</UL>

<P><STRONG><a name="[1f1]"></a>enet_txfifo_flush</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32f4xx_enet.o(i.enet_txfifo_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enet_txfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_tx_enable
</UL>

<P><STRONG><a name="[1f6]"></a>etharp_cleanup_netif</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, etharp.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[79]"></a>etharp_output</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[1a2]"></a>etharp_query</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[1fd]"></a>etharp_request</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[141]"></a>etharp_tmr</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[201]"></a>ethernet_input</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[81]"></a>ethernetif_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; sys_thread_new &rArr; osThreadCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.lwip_stack_init)
</UL>
<P><STRONG><a name="[7d]"></a>ethernetif_input</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.low_level_init)
</UL>
<P><STRONG><a name="[b9]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_exti.o(i.exti_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[215]"></a>gd_eval_com_init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, gd32f450i_eval.o(i.gd_eval_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = gd_eval_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task
</UL>

<P><STRONG><a name="[21b]"></a>gd_eval_led_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gd32f450i_eval.o(i.gd_eval_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gd_eval_led_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task
</UL>

<P><STRONG><a name="[b8]"></a>gd_eval_led_toggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f450i_eval.o(i.gd_eval_led_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>

<P><STRONG><a name="[1e0]"></a>gpio_af_set</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
</UL>

<P><STRONG><a name="[1e1]"></a>gpio_mode_set</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
</UL>

<P><STRONG><a name="[1e2]"></a>gpio_output_options_set</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
</UL>

<P><STRONG><a name="[220]"></a>htonll</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, def.o(i.htonll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put64
</UL>

<P><STRONG><a name="[221]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[223]"></a>icmp_input</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[256]"></a>igmp_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, igmp.o(i.igmp_init))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[22a]"></a>igmp_input</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, igmp.o(i.igmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[22e]"></a>igmp_joingroup</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, igmp.o(i.igmp_joingroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = igmp_joingroup &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
</UL>

<P><STRONG><a name="[231]"></a>igmp_leavegroup</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, igmp.o(i.igmp_leavegroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = igmp_leavegroup &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
</UL>

<P><STRONG><a name="[22b]"></a>igmp_lookfor_group</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, igmp.o(i.igmp_lookfor_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>

<P><STRONG><a name="[235]"></a>igmp_report_groups</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, igmp.o(i.igmp_report_groups))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer &rArr; oc_random_value
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>

<P><STRONG><a name="[236]"></a>igmp_start</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, igmp.o(i.igmp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[238]"></a>igmp_tmr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, igmp.o(i.igmp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = igmp_tmr &rArr; igmp_timeout &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timer
</UL>

<P><STRONG><a name="[226]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[224]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[82]"></a>init_task</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, main.o(i.init_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = init_task &rArr; lwip_stack_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_stack_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_system_setup
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserverstart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1fa]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[202]"></a>ip_input</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[227]"></a>ip_output</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[225]"></a>ip_output_if</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ip_output_if &rArr; ip_output_if_opt &rArr; pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[22d]"></a>ip_output_if_opt</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, ip.o(i.ip_output_if_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ip_output_if_opt &rArr; pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[23f]"></a>ip_route</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[7c]"></a>led_task</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.led_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = led_task &rArr; osDelay &rArr; LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_task)
</UL>
<P><STRONG><a name="[194]"></a>lwip_bind</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, sockets.o(i.lwip_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectivity_ipv4_init
</UL>

<P><STRONG><a name="[24c]"></a>lwip_close</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sockets.o(i.lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_connectivity_shutdown
</UL>

<P><STRONG><a name="[195]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonll
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectivity_ipv4_init
</UL>

<P><STRONG><a name="[192]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_buffer
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectivity_ipv4_init
</UL>

<P><STRONG><a name="[24e]"></a>lwip_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; mem_init &rArr; sys_sem_new &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[1aa]"></a>lwip_ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohll
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get32
</UL>

<P><STRONG><a name="[21c]"></a>lwip_ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get16
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_event_thread
</UL>

<P><STRONG><a name="[258]"></a>lwip_recvfrom</STRONG> (Thumb, 648 bytes, Stack size 96 bytes, sockets.o(i.lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; osMessageGet &rArr; LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_event_thread
</UL>

<P><STRONG><a name="[25e]"></a>lwip_select</STRONG> (Thumb, 844 bytes, Stack size 120 bytes, sockets.o(i.lwip_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = lwip_select &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_buffer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_event_thread
</UL>

<P><STRONG><a name="[262]"></a>lwip_send</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, sockets.o(i.lwip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[263]"></a>lwip_sendto</STRONG> (Thumb, 274 bytes, Stack size 72 bytes, sockets.o(i.lwip_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_buffer
</UL>

<P><STRONG><a name="[196]"></a>lwip_setsockopt</STRONG> (Thumb, 444 bytes, Stack size 56 bytes, sockets.o(i.lwip_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt &rArr; tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectivity_ipv4_init
</UL>

<P><STRONG><a name="[193]"></a>lwip_socket</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; osMessageCreate &rArr; LOS_QueueCreate &rArr; osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectivity_ipv4_init
</UL>

<P><STRONG><a name="[253]"></a>lwip_socket_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sockets.o(i.lwip_socket_init))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[23a]"></a>lwip_stack_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, netconf.o(i.lwip_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = lwip_stack_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task
</UL>

<P><STRONG><a name="[6b]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = main &rArr; LOS_KernelInit &rArr; osMain &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EnableTick
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[26f]"></a>mem_free</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[250]"></a>mem_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = mem_init &rArr; sys_sem_new &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[271]"></a>mem_malloc</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = mem_malloc &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[272]"></a>mem_trim</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mem_trim &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[234]"></a>memp_free</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[251]"></a>memp_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[233]"></a>memp_malloc</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[214]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[267]"></a>netbuf_free</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[265]"></a>netbuf_ref</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netbuf.o(i.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[273]"></a>netconn_alloc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; osMessageCreate &rArr; LOS_QueueCreate &rArr; osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[24b]"></a>netconn_bind</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, api_lib.o(i.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = netconn_bind &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[24d]"></a>netconn_delete</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[277]"></a>netconn_free</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = netconn_free &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[25d]"></a>netconn_getaddr</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, api_lib.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[269]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; osMessageCreate &rArr; LOS_QueueCreate &rArr; osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[25b]"></a>netconn_recv</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, api_lib.o(i.netconn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; osMessageGet &rArr; LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[25a]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, api_lib.o(i.netconn_recv_tcp_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; osMessageGet &rArr; LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[259]"></a>netconn_recved</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, api_lib.o(i.netconn_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = netconn_recved &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[266]"></a>netconn_send</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, api_lib.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = netconn_send &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[264]"></a>netconn_write_partly</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, api_lib.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = netconn_write_partly &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[26b]"></a>netif_add</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_stack_init
</UL>

<P><STRONG><a name="[252]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[27e]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[26c]"></a>netif_set_default</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_stack_init
</UL>

<P><STRONG><a name="[1b8]"></a>netif_set_down</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[19e]"></a>netif_set_gw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[19c]"></a>netif_set_ipaddr</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[19d]"></a>netif_set_netmask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[19f]"></a>netif_set_up</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_stack_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[21d]"></a>ntohll</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, def.o(i.ntohll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get64
</UL>

<P><STRONG><a name="[281]"></a>nvic_irq_enable</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, gd32f4xx_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_configuration
</UL>

<P><STRONG><a name="[26d]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[280]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_configuration
</UL>

<P><STRONG><a name="[13d]"></a>oc_add_device</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, oc_server_api.o(i.oc_add_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = oc_add_device &rArr; oc_core_add_new_device &rArr; oc_core_encode_interfaces_mask &rArr; cbor_encode_text_string &rArr; encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[283]"></a>oc_add_resource</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oc_server_api.o(i.oc_add_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = oc_add_resource &rArr; oc_ri_add_resource &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_add_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_resources
</UL>

<P><STRONG><a name="[119]"></a>oc_alloc_string</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, oc_helpers.o(i.oc_alloc_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = oc_alloc_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_alloc_string_array
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_store_uri
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_payload
</UL>

<P><STRONG><a name="[16c]"></a>oc_allocate_message</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oc_buffer.o(i.oc_allocate_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oc_allocate_message
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_empty_ack
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_new_transaction
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_event_thread
</UL>

<P><STRONG><a name="[2bf]"></a>oc_clock_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clock.o(i.oc_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_init
</UL>

<P><STRONG><a name="[285]"></a>oc_clock_time</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock.o(i.oc_clock_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserverstart
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_timer_set
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_timer_restart
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_timer_expired
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>

<P><STRONG><a name="[287]"></a>oc_connectivity_init</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, ipadapter.o(i.oc_connectivity_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = oc_connectivity_init &rArr; connectivity_ipv4_init &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; osMessageCreate &rArr; LOS_QueueCreate &rArr; osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectivity_ipv4_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_main_init
</UL>

<P><STRONG><a name="[288]"></a>oc_connectivity_shutdown</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ipadapter.o(i.oc_connectivity_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = oc_connectivity_shutdown &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_main_shutdown
</UL>

<P><STRONG><a name="[282]"></a>oc_core_add_new_device</STRONG> (Thumb, 706 bytes, Stack size 128 bytes, oc_core_res.o(i.oc_core_add_new_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = oc_core_add_new_device &rArr; oc_core_encode_interfaces_mask &rArr; cbor_encode_text_string &rArr; encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_uuid_to_str
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_rep_new
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_gen_uuid
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_alloc_string
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_map
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_array
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_close_container
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_text_string
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_populate_resource
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_encode_interfaces_mask
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_payload
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_add_device
</UL>

<P><STRONG><a name="[20c]"></a>oc_core_encode_interfaces_mask</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, oc_core_res.o(i.oc_core_encode_interfaces_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = oc_core_encode_interfaces_mask &rArr; cbor_encode_text_string &rArr; encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_array
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_close_container
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_text_string
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_device_object
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_resource
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_baseline_interface
</UL>

<P><STRONG><a name="[2fe]"></a>oc_core_get_device_id</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oc_core_res.o(i.oc_core_get_device_id))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_device_object
</UL>

<P><STRONG><a name="[28e]"></a>oc_core_get_num_devices</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oc_core_res.o(i.oc_core_get_num_devices))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_discovery_handler
</UL>

<P><STRONG><a name="[2c5]"></a>oc_core_get_resource_by_index</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oc_core_res.o(i.oc_core_get_resource_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_device_object
</UL>

<P><STRONG><a name="[28f]"></a>oc_core_init_platform</STRONG> (Thumb, 406 bytes, Stack size 128 bytes, oc_core_res.o(i.oc_core_init_platform))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = oc_core_init_platform &rArr; oc_core_encode_interfaces_mask &rArr; cbor_encode_text_string &rArr; encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_uuid_to_str
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_rep_new
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_gen_uuid
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_alloc_string
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_map
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_array
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_close_container
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_text_string
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_populate_resource
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_encode_interfaces_mask
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_payload
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_init_platform
</UL>

<P><STRONG><a name="[8c]"></a>oc_core_platform_handler</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, oc_core_res.o(i.oc_core_platform_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = oc_core_platform_handler &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_status_code
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oc_core_res.o(i.oc_core_init_platform)
</UL>
<P><STRONG><a name="[28a]"></a>oc_core_populate_resource</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, oc_core_res.o(i.oc_core_populate_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = oc_core_populate_resource &rArr; _oc_alloc_string_array &rArr; oc_alloc_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_string_array_add_item
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_alloc_string_array
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_store_uri
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_create_discovery_resource
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
</UL>

<P><STRONG><a name="[291]"></a>oc_create_discovery_resource</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, oc_discovery.o(i.oc_create_discovery_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = oc_create_discovery_resource &rArr; oc_core_populate_resource &rArr; _oc_alloc_string_array &rArr; oc_alloc_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_populate_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_init
</UL>

<P><STRONG><a name="[15e]"></a>oc_etimer_expired</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oc_etimer.o(i.oc_etimer_expired))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_event_callback_timers
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_check_transactions
</UL>

<P><STRONG><a name="[292]"></a>oc_etimer_next_expiration_time</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, oc_etimer.o(i.oc_etimer_next_expiration_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = oc_etimer_next_expiration_time
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_request_poll
</UL>

<P><STRONG><a name="[293]"></a>oc_etimer_pending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oc_etimer.o(i.oc_etimer_pending))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_next_expiration_time
</UL>

<P><STRONG><a name="[12c]"></a>oc_etimer_request_poll</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oc_etimer.o(i.oc_etimer_request_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = oc_etimer_request_poll &rArr; oc_etimer_next_expiration_time
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_poll
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_next_expiration_time
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_main_poll
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_oc_etimer_process
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>

<P><STRONG><a name="[187]"></a>oc_etimer_restart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oc_etimer.o(i.oc_etimer_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oc_etimer_restart &rArr; add_timer &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_timer_restart
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_event_callback_timers
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_transaction
</UL>

<P><STRONG><a name="[12a]"></a>oc_etimer_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, oc_etimer.o(i.oc_etimer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = oc_etimer_set &rArr; add_timer &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_timer_set
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_add_timed_event_callback_ticks
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_periodic_observe_callback
</UL>

<P><STRONG><a name="[161]"></a>oc_etimer_stop</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, oc_etimer.o(i.oc_etimer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = oc_etimer_stop &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_periodic_observe_callback
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_clear_transaction
</UL>

<P><STRONG><a name="[298]"></a>oc_free_rep</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, oc_rep.o(i.oc_free_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = oc_free_rep &rArr;  oc_free_rep (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free_rep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_rep
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_free_array
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free_string
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free_rep
</UL>

<P><STRONG><a name="[210]"></a>oc_free_string</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oc_helpers.o(i.oc_free_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oc_free_string &rArr; oc_free &rArr; oc_mmem_free &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free_rep
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_payload
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_light
</UL>

<P><STRONG><a name="[289]"></a>oc_gen_uuid</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oc_uuid.o(i.oc_gen_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = oc_gen_uuid &rArr; oc_random_value
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_random_value
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
</UL>

<P><STRONG><a name="[13c]"></a>oc_init_platform</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oc_server_api.o(i.oc_init_platform))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = oc_init_platform &rArr; oc_core_init_platform &rArr; oc_core_encode_interfaces_mask &rArr; cbor_encode_text_string &rArr; encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[127]"></a>oc_list_add</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, oc_list.o(i.oc_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_add_timed_event_callback_ticks
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_add_resource
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_periodic_observe_callback
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_network_event
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_mmem_alloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_observer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_new_transaction
</UL>

<P><STRONG><a name="[15d]"></a>oc_list_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oc_list.o(i.oc_list_head))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_token
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_event_callback_timers
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_periodic_observe_callback
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_get_app_resources
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_client
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_handle_by_uri
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_mid
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_transaction_by_mid
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_check_transactions
</UL>

<P><STRONG><a name="[189]"></a>oc_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oc_list.o(i.oc_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_mmem_init
</UL>

<P><STRONG><a name="[18a]"></a>oc_list_item_next</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, oc_list.o(i.oc_list_item_next))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
</UL>

<P><STRONG><a name="[2b0]"></a>oc_list_pop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, oc_list.o(i.oc_list_pop))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_network_event
</UL>

<P><STRONG><a name="[163]"></a>oc_list_remove</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, oc_list.o(i.oc_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_periodic_observe_callback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_event_callback_timers
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_mmem_free
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_handle_by_uri
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_clear_transaction
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_clear
</UL>

<P><STRONG><a name="[299]"></a>oc_list_tail</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, oc_list.o(i.oc_list_tail))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_add
</UL>

<P><STRONG><a name="[29a]"></a>oc_main_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, oc_main.o(i.oc_main_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = oc_main_init &rArr; oc_connectivity_init &rArr; connectivity_ipv4_init &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; osMessageCreate &rArr; LOS_QueueCreate &rArr; osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_network_event_handler_mutex_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_connectivity_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_impl
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserverstart
</UL>

<P><STRONG><a name="[29e]"></a>oc_main_poll</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, oc_main.o(i.oc_main_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = oc_main_poll &rArr; oc_process_run &rArr; do_event &rArr; do_poll &rArr; call_process &rArr;  exit_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_run
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_request_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserverstart
</UL>

<P><STRONG><a name="[2a0]"></a>oc_main_shutdown</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oc_main.o(i.oc_main_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = oc_main_shutdown &rArr; oc_connectivity_shutdown &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_shutdown
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_connectivity_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserverstart
</UL>

<P><STRONG><a name="[10c]"></a>oc_memb_alloc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, oc_memb.o(i.oc_memb_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_allocate_message
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_alloc_resource
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_add_timed_event_callback_ticks
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_periodic_observe_callback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_rep
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_observer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_new_transaction
</UL>

<P><STRONG><a name="[117]"></a>oc_memb_free</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, oc_memb.o(i.oc_memb_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = oc_memb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_message_unref
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_periodic_observe_callback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_event_callback_timers
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_rep
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_handle_by_uri
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_clear_transaction
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_clear
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_new_transaction
</UL>

<P><STRONG><a name="[188]"></a>oc_message_add_ref</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oc_buffer.o(i.oc_message_add_ref))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_transaction
</UL>

<P><STRONG><a name="[162]"></a>oc_message_unref</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, oc_buffer.o(i.oc_message_unref))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = oc_message_unref &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_post
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_message_buffer_handler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_clear_transaction
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_coap_engine
</UL>

<P><STRONG><a name="[2a3]"></a>oc_mmem_alloc</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, oc_mmem.o(i.oc_mmem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_malloc
</UL>

<P><STRONG><a name="[297]"></a>oc_mmem_free</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, oc_mmem.o(i.oc_mmem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = oc_mmem_free &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_remove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free
</UL>

<P><STRONG><a name="[2a2]"></a>oc_mmem_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, oc_mmem.o(i.oc_mmem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oc_mmem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_malloc
</UL>

<P><STRONG><a name="[27f]"></a>oc_network_event</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, oc_network_events.o(i.oc_network_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = oc_network_event &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_signal_event_loop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_poll
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_network_event_handler_mutex_unlock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_network_event_handler_mutex_lock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_event_thread
</UL>

<P><STRONG><a name="[29c]"></a>oc_network_event_handler_mutex_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ipadapter.o(i.oc_network_event_handler_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = oc_network_event_handler_mutex_init &rArr; LOS_MuxCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_main_init
</UL>

<P><STRONG><a name="[2a4]"></a>oc_network_event_handler_mutex_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipadapter.o(i.oc_network_event_handler_mutex_lock))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_network_event
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_network_event
</UL>

<P><STRONG><a name="[2a5]"></a>oc_network_event_handler_mutex_unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipadapter.o(i.oc_network_event_handler_mutex_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_network_event
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_network_event
</UL>

<P><STRONG><a name="[2a7]"></a>oc_new_resource</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, oc_server_api.o(i.oc_new_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = oc_new_resource &rArr; oc_populate_resource_object &rArr; _oc_alloc_string_array &rArr; oc_alloc_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_alloc_resource
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_populate_resource_object
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_resources
</UL>

<P><STRONG><a name="[13e]"></a>oc_new_string</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, oc_helpers.o(i.oc_new_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = oc_new_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_malloc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_store_uri
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_light
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[2aa]"></a>oc_parse_rep</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, oc_rep.o(i.oc_parse_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = oc_parse_rep &rArr; oc_parse_rep_value &rArr;  oc_parse_rep_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_enter_container
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_advance
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_parser_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_is_valid
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_is_array
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_rep
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[13b]"></a>oc_process_alloc_event</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, oc_process.o(i.oc_process_alloc_event))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_events
</UL>

<P><STRONG><a name="[21e]"></a>oc_process_baseline_interface</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, oc_server_api.o(i.oc_process_baseline_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = oc_process_baseline_interface &rArr; oc_core_encode_interfaces_mask &rArr; cbor_encode_text_string &rArr; encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_array
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_close_container
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_text_string
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_encode_interfaces_mask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
</UL>

<P><STRONG><a name="[2ae]"></a>oc_process_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oc_process.o(i.oc_process_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oc_process_exit &rArr; exit_process &rArr; call_process &rArr;  exit_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_processes
</UL>

<P><STRONG><a name="[207]"></a>oc_process_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oc_process.o(i.oc_process_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_oc_network_events
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>

<P><STRONG><a name="[294]"></a>oc_process_poll</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, oc_process.o(i.oc_process_poll))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_network_event
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_request_poll
</UL>

<P><STRONG><a name="[2b2]"></a>oc_process_post</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, oc_process.o(i.oc_process_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = oc_process_post &rArr; oc_message_unref &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_message_unref
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_message
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_recv_message
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_message_buffer_handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_oc_etimer_process
</UL>

<P><STRONG><a name="[2b3]"></a>oc_process_post_synch</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, oc_process.o(i.oc_process_post_synch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = oc_process_post_synch &rArr; call_process &rArr;  exit_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_start
</UL>

<P><STRONG><a name="[29f]"></a>oc_process_run</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oc_process.o(i.oc_process_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = oc_process_run &rArr; do_event &rArr; do_poll &rArr; call_process &rArr;  exit_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_main_poll
</UL>

<P><STRONG><a name="[2b4]"></a>oc_process_start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, oc_process.o(i.oc_process_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = oc_process_start &rArr; oc_process_post_synch &rArr; call_process &rArr;  exit_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_post_synch
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_processes
</UL>

<P><STRONG><a name="[2ca]"></a>oc_random_destroy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, random.o(i.oc_random_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_shutdown
</UL>

<P><STRONG><a name="[2b5]"></a>oc_random_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, random.o(i.oc_random_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oc_random_init
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_init
</UL>

<P><STRONG><a name="[166]"></a>oc_random_value</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, random.o(i.oc_random_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oc_random_value
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_gen_uuid
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_connection
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_transaction
</UL>

<P><STRONG><a name="[2b1]"></a>oc_recv_message</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oc_buffer.o(i.oc_recv_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = oc_recv_message &rArr; oc_process_post &rArr; oc_message_unref &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_network_event
</UL>

<P><STRONG><a name="[20e]"></a>oc_rep_finalize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, oc_rep.o(i.oc_rep_finalize))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_discovery_handler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_payload
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_length
</UL>

<P><STRONG><a name="[16e]"></a>oc_rep_new</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oc_rep.o(i.oc_rep_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = oc_rep_new &rArr; cbor_encoder_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
</UL>

<P><STRONG><a name="[300]"></a>oc_resource_bind_resource_interface</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, oc_server_api.o(i.oc_resource_bind_resource_interface))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_resources
</UL>

<P><STRONG><a name="[2b9]"></a>oc_resource_bind_resource_type</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, oc_server_api.o(i.oc_resource_bind_resource_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = oc_resource_bind_resource_type &rArr; _oc_string_array_add_item &rArr; _oc_copy_string_to_string_array &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_string_array_add_item
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_resources
</UL>

<P><STRONG><a name="[301]"></a>oc_resource_set_default_interface</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oc_server_api.o(i.oc_resource_set_default_interface))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_resources
</UL>

<P><STRONG><a name="[302]"></a>oc_resource_set_discoverable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, oc_server_api.o(i.oc_resource_set_discoverable))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_resources
</UL>

<P><STRONG><a name="[303]"></a>oc_resource_set_periodic_observable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, oc_server_api.o(i.oc_resource_set_periodic_observable))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_resources
</UL>

<P><STRONG><a name="[304]"></a>oc_resource_set_request_handler</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, oc_server_api.o(i.oc_resource_set_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = oc_resource_set_request_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_resources
</UL>

<P><STRONG><a name="[284]"></a>oc_ri_add_resource</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oc_ri.o(i.oc_ri_add_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oc_ri_add_resource &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_add_resource
</UL>

<P><STRONG><a name="[2ba]"></a>oc_ri_add_timed_event_callback_ticks</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, oc_ri.o(i.oc_ri_add_timed_event_callback_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = oc_ri_add_timed_event_callback_ticks &rArr; oc_etimer_set &rArr; add_timer &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_alloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_set
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[2a8]"></a>oc_ri_alloc_resource</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, oc_ri.o(i.oc_ri_alloc_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oc_ri_alloc_resource
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_new_resource
</UL>

<P><STRONG><a name="[2bb]"></a>oc_ri_get_app_resources</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oc_ri.o(i.oc_ri_get_app_resources))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oc_ri_get_app_resources
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_device_object
</UL>

<P><STRONG><a name="[2bc]"></a>oc_ri_get_interface_mask</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, oc_ri.o(i.oc_ri_get_interface_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oc_ri_get_interface_mask &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[2bd]"></a>oc_ri_get_query_nth_key_value</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, oc_ri.o(i.oc_ri_get_query_nth_key_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = oc_ri_get_query_nth_key_value
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_get_query_value
</UL>

<P><STRONG><a name="[28c]"></a>oc_ri_get_query_value</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, oc_ri.o(i.oc_ri_get_query_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = oc_ri_get_query_value &rArr; oc_ri_get_query_nth_key_value
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_get_query_nth_key_value
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_discovery_handler
</UL>

<P><STRONG><a name="[29b]"></a>oc_ri_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, oc_ri.o(i.oc_ri_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = oc_ri_init &rArr; oc_create_discovery_resource &rArr; oc_core_populate_resource &rArr; _oc_alloc_string_array &rArr; oc_alloc_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_random_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_init
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_clock_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_processes
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mpro_status_codes
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_create_discovery_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_main_init
</UL>

<P><STRONG><a name="[180]"></a>oc_ri_invoke_coap_entity_handler</STRONG> (Thumb, 876 bytes, Stack size 152 bytes, oc_ri.o(i.oc_ri_invoke_coap_entity_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = oc_ri_invoke_coap_entity_handler &rArr; oc_parse_rep &rArr; oc_parse_rep_value &rArr;  oc_parse_rep_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_status_code
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_payload
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_size1
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_observe
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_header_content_format
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_separate_accept
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_by_token
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_handler
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_payload
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_header_uri_query
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_header_uri_path
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_get_header_observe
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_get_interface_mask
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_add_timed_event_callback_ticks
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_periodic_observe_callback
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;does_interface_support_method
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_periodic_observe_callback
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free_rep
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_get_query_value
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_get_app_resources
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_status_code
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_rep_new
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_get_resource_by_index
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
</UL>

<P><STRONG><a name="[2a1]"></a>oc_ri_shutdown</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oc_ri.o(i.oc_ri_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = oc_ri_shutdown &rArr; stop_processes &rArr; oc_process_exit &rArr; exit_process &rArr; call_process &rArr;  exit_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_random_destroy
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_processes
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_main_shutdown
</UL>

<P><STRONG><a name="[2cc]"></a>oc_send_buffer</STRONG> (Thumb, 214 bytes, Stack size 176 bytes, ipadapter.o(i.oc_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = oc_send_buffer &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_message_buffer_handler
</UL>

<P><STRONG><a name="[186]"></a>oc_send_message</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oc_buffer.o(i.oc_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = oc_send_message &rArr; oc_process_post &rArr; oc_message_unref &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_post
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_signal_event_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_send_message
</UL>

<P><STRONG><a name="[21f]"></a>oc_send_response</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oc_server_api.o(i.oc_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = oc_send_response &rArr; response_length
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_status_code
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_length
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_light
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_light
</UL>

<P><STRONG><a name="[16f]"></a>oc_status_code</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oc_ri.o(i.oc_status_code))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_discovery_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_platform_handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_device_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_response
</UL>

<P><STRONG><a name="[290]"></a>oc_store_uri</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, oc_core_res.o(i.oc_store_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = oc_store_uri &rArr; oc_new_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_new_string
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_alloc_string
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_populate_resource
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_populate_resource_object
</UL>

<P><STRONG><a name="[2cf]"></a>oc_timer_expired</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, oc_timer.o(i.oc_timer_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = oc_timer_expired &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_oc_etimer_process
</UL>

<P><STRONG><a name="[295]"></a>oc_timer_restart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oc_timer.o(i.oc_timer_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oc_timer_restart &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_restart
</UL>

<P><STRONG><a name="[296]"></a>oc_timer_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, oc_timer.o(i.oc_timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = oc_timer_set &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_set
</UL>

<P><STRONG><a name="[28b]"></a>oc_uuid_to_str</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, oc_uuid.o(i.oc_uuid_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oc_uuid_to_str &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_device_object
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
</UL>

<P><STRONG><a name="[241]"></a>osDelay</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cmsis_liteos.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = osDelay &rArr; LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MS2Tick
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>

<P><STRONG><a name="[3]"></a>osHwiDefaultHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_hwi.o(i.osHwiDefaultHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osHwiDefaultHandler &rArr; osIntNumGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Address Reference Count : 2]<UL><LI> los_hwi.o(i.osHwiInit)
<LI> los_hwi.o(.vector.bss)
</UL>
<P><STRONG><a name="[2d2]"></a>osHwiInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, los_hwi.o(i.osHwiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osHwiInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LosAdapIntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[8f]"></a>osIdleTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, los_task.o(i.osIdleTask))
<BR>[Address Reference Count : 1]<UL><LI> los_task.o(i.osIdleTaskCreate)
</UL>
<P><STRONG><a name="[2d4]"></a>osIdleTaskCreate</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, los_task.o(i.osIdleTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = osIdleTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[2d1]"></a>osIntNumGet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, los_hwi.o(i.osIntNumGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osIntNumGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiDefaultHandler
</UL>

<P><STRONG><a name="[306]"></a>osKernelSysTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_liteos.o(i.osKernelSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[c8]"></a>osMain</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, los_config.o(i.osMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = osMain &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRegister
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHwiInit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[2d7]"></a>osMemSystemInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, los_memory.o(i.osMemSystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osMemSystemInit &rArr; LOS_MemInit &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[2e5]"></a>osMessageCreate</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cmsis_liteos.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = osMessageCreate &rArr; LOS_QueueCreate &rArr; osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[2e6]"></a>osMessageDelete</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cmsis_liteos.o(i.osMessageDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = osMessageDelete &rArr; LOS_QueueDelete &rArr; LOS_MemFree &rArr; osMemCheckUsedNode &rArr; osMemIsNodeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[2e7]"></a>osMessageGet</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, cmsis_liteos.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = osMessageGet &rArr; LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MS2Tick
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[2e8]"></a>osMessagePut</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cmsis_liteos.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MS2Tick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[2da]"></a>osMuxInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, los_mux.o(i.osMuxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osMuxInit &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[2e9]"></a>osPriqueueInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, los_priqueue.o(i.osPriqueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osPriqueueInit &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[e5]"></a>osQueueCreate</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, los_queue.o(i.osQueueCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
</UL>

<P><STRONG><a name="[2db]"></a>osQueueInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, los_queue.o(i.osQueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = osQueueInit &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[2d6]"></a>osRegister</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_config.o(i.osRegister))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[fa]"></a>osSchedule</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, los_hw.o(i.osSchedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osSchedule
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[2d9]"></a>osSemInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, los_sem.o(i.osSemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = osSemInit &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[2dc]"></a>osSwTmrInit</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, los_swtmr.o(i.osSwTmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxInit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[2ee]"></a>osSwTmrStart</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, los_swtmr.o(i.osSwTmrStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSwTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[90]"></a>osSwTmrTask</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, los_swtmr.o(i.osSwTmrTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osSwTmrTask &rArr; LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_swtmr.o(i.osSwTmrTaskCreate)
</UL>
<P><STRONG><a name="[2eb]"></a>osSwTmrTaskCreate</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, los_swtmr.o(i.osSwTmrTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
</UL>

<P><STRONG><a name="[2ef]"></a>osSwtmrScan</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, los_swtmr.o(i.osSwtmrScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[c3]"></a>osTaskAdd2TimerList</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, los_task.o(i.osTaskAdd2TimerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueuePend
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
</UL>

<P><STRONG><a name="[92]"></a>osTaskEntry</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, los_task.o(i.osTaskEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = osTaskEntry &rArr; LOS_SemPost &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(i.osTskStackInit)
</UL>
<P><STRONG><a name="[91]"></a>osTaskExit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_hw.o(i.osTaskExit))
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(i.osTskStackInit)
</UL>
<P><STRONG><a name="[2d8]"></a>osTaskInit</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, los_task.o(i.osTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osTaskInit &rArr; osPriqueueInit &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[2e3]"></a>osTaskMemUsedDec</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, los_memstat.o(i.osTaskMemUsedDec))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFreeNode
</UL>

<P><STRONG><a name="[2e1]"></a>osTaskMemUsedInc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, los_memstat.o(i.osTaskMemUsedInc))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>

<P><STRONG><a name="[e2]"></a>osTaskPriModify</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, los_task.o(i.osTaskPriModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTaskPriModify &rArr; LOS_PriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
</UL>

<P><STRONG><a name="[2f3]"></a>osTaskScan</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, los_task.o(i.osTaskScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = osTaskScan &rArr; LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[2f0]"></a>osTaskSelfDelete</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, los_task.o(i.osTaskSelfDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = osTaskSelfDelete &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueTop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
</UL>

<P><STRONG><a name="[26e]"></a>osThreadCreate</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, cmsis_liteos.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = osThreadCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>osTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, los_tick.o(i.osTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickHandler
</UL>

<P><STRONG><a name="[bd]"></a>osTickStart</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, los_bsp_adapter.o(i.osTickStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTickStart
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SetTickSycle
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EnableTick
</UL>

<P><STRONG><a name="[c5]"></a>osTimerListDelete</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, los_task.o(i.osTimerListDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWakeUp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[2f4]"></a>osTimesliceCheck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, los_timeslice.o(i.osTimesliceCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = osTimesliceCheck &rArr; LOS_TaskYield &rArr; LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[2dd]"></a>osTimesliceInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, los_timeslice.o(i.osTimesliceInit))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMain
</UL>

<P><STRONG><a name="[fe]"></a>osTskStackInit</STRONG> (Thumb, 306 bytes, Stack size 12 bytes, los_hw.o(i.osTskStackInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osTskStackInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[1a7]"></a>pbuf_alloc</STRONG> (Thumb, 654 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[2f6]"></a>pbuf_cat</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[2f7]"></a>pbuf_chain</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[31d]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[1fe]"></a>pbuf_copy</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_copy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[25c]"></a>pbuf_copy_partial</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[1b0]"></a>pbuf_free</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[1f9]"></a>pbuf_header</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[1ad]"></a>pbuf_realloc</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[1ff]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = pbuf_ref &rArr; sys_arch_unprotect
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[1bb]"></a>raw_bind</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(i.raw_bind))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[23c]"></a>raw_input</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2f8]"></a>raw_new</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = raw_new &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[2f9]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[1c8]"></a>raw_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, raw.o(i.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = raw_remove &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[1cf]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[1d0]"></a>raw_sendto</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = raw_sendto &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[1e3]"></a>rcu_ckout0_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f4xx_rcu.o(i.rcu_ckout0_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_ckout0_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
</UL>

<P><STRONG><a name="[1ed]"></a>rcu_clock_freq_get</STRONG> (Thumb, 264 bytes, Stack size 84 bytes, gd32f4xx_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_phy_config
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[1df]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
</UL>

<P><STRONG><a name="[1d9]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_deinit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[1d8]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_deinit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[23b]"></a>simpleserverstart</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, simpleserver.o(i.simpleserverstart))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = simpleserverstart &rArr; oc_main_init &rArr; oc_connectivity_init &rArr; connectivity_ipv4_init &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; osMessageCreate &rArr; LOS_QueueCreate &rArr; osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventRead
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_main_shutdown
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_main_poll
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_main_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_clock_time
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task
</UL>

<P><STRONG><a name="[27d]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_fetch &rArr; osMessageGet &rArr; LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[278]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; osMessageGet &rArr; LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[138]"></a>sys_arch_protect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sys_arch_protect
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[204]"></a>sys_arch_sem_wait</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[139]"></a>sys_arch_unprotect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_unprotect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sys_arch_unprotect
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[24f]"></a>sys_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[279]"></a>sys_mbox_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = sys_mbox_free &rArr; osMessageDelete &rArr; LOS_QueueDelete &rArr; LOS_MemFree &rArr; osMemCheckUsedNode &rArr; osMemIsNodeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[274]"></a>sys_mbox_new</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sys_mbox_new &rArr; osMessageCreate &rArr; LOS_QueueCreate &rArr; osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[307]"></a>sys_mbox_post</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sys_mbox_post &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[275]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[1f3]"></a>sys_mbox_trypost</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sys_mbox_trypost &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[1f2]"></a>sys_mbox_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[261]"></a>sys_sem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sys_sem_free &rArr; LOS_SemDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[242]"></a>sys_sem_new</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = sys_sem_new &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[27b]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[b4]"></a>sys_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sys_sem_signal &rArr; LOS_SemPost &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[1ca]"></a>sys_sem_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_valid))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[247]"></a>sys_thread_new</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = sys_thread_new &rArr; osThreadCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[142]"></a>sys_timeout</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lwip_timers.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[257]"></a>sys_timeouts_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lwip_timers.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[309]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lwip_timers.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; osMessageGet &rArr; LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[30a]"></a>sys_untimeout</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lwip_timers.o(i.sys_untimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = sys_untimeout &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[1e4]"></a>syscfg_enet_phy_interface_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_syscfg.o(i.syscfg_enet_phy_interface_config))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
</UL>

<P><STRONG><a name="[30c]"></a>tcp_abandon</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[27a]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
</UL>

<P><STRONG><a name="[1c0]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[310]"></a>tcp_alloc</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[1bf]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[1bd]"></a>tcp_bind</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[1c5]"></a>tcp_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[31b]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[31c]"></a>tcp_enqueue_flags</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[1c4]"></a>tcp_err</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcp.o(i.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_err &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[31e]"></a>tcp_fasttmr</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[255]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(i.tcp_init))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[23e]"></a>tcp_input</STRONG> (Thumb, 1722 bytes, Stack size 56 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[323]"></a>tcp_keepalive</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[2fc]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[313]"></a>tcp_next_iss</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[1d5]"></a>tcp_output</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[317]"></a>tcp_pcb_purge</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[30d]"></a>tcp_pcb_remove</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[1c3]"></a>tcp_poll</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_poll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[31f]"></a>tcp_process_refused_data</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[1c1]"></a>tcp_recv</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_recv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[99]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[1ce]"></a>tcp_recved</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[32a]"></a>tcp_rexmit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[32b]"></a>tcp_rexmit_fast</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[32d]"></a>tcp_rexmit_rto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[30f]"></a>tcp_rst</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[31a]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[30e]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[326]"></a>tcp_send_empty_ack</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[318]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[1c2]"></a>tcp_sent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_sent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[1c6]"></a>tcp_shutdown</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[32e]"></a>tcp_slowtmr</STRONG> (Thumb, 1412 bytes, Stack size 48 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[315]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lwip_timers.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[330]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[32c]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[1d4]"></a>tcp_write</STRONG> (Thumb, 1712 bytes, Stack size 112 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[32f]"></a>tcp_zero_window_probe</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = tcp_zero_window_probe &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[276]"></a>tcpip_apimsg</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, tcpip.o(i.tcpip_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tcpip_apimsg &rArr; sys_mbox_post &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[268]"></a>tcpip_callback_with_block</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_trypost &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>

<P><STRONG><a name="[26a]"></a>tcpip_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; osThreadCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_stack_init
</UL>

<P><STRONG><a name="[80]"></a>tcpip_input</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tcpip_input &rArr; sys_mbox_trypost &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.lwip_stack_init)
</UL>
<P><STRONG><a name="[1bc]"></a>udp_bind</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[254]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[23d]"></a>udp_input</STRONG> (Thumb, 524 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2fa]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[2fb]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[1c9]"></a>udp_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = udp_remove &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[1d1]"></a>udp_send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[1d2]"></a>udp_sendto</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[1ae]"></a>udp_sendto_if</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[217]"></a>usart_baudrate_set</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, gd32f4xx_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[211]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[216]"></a>usart_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[21a]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[212]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[218]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[219]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2ec]"></a>osSwTmrTimeoutHandle</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, los_swtmr.o(i.osSwTmrTimeoutHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = osSwTmrTimeoutHandle &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>

<P><STRONG><a name="[2ed]"></a>osSwtmrDelete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_swtmr.o(i.osSwtmrDelete))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[ca]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>

<P><STRONG><a name="[fc]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[fd]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[2f2]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[c9]"></a>LOS_ListTailInsert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_task.o(i.LOS_ListTailInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSelfDelete
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[cc]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>

<P><STRONG><a name="[df]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>

<P><STRONG><a name="[de]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>

<P><STRONG><a name="[e0]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>

<P><STRONG><a name="[cb]"></a>LOS_ListTailInsert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_mux.o(i.LOS_ListTailInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
</UL>

<P><STRONG><a name="[2ea]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueuePend
</UL>

<P><STRONG><a name="[e8]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueuePend
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
</UL>

<P><STRONG><a name="[e6]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
</UL>

<P><STRONG><a name="[ea]"></a>osQueuePend</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, los_queue.o(i.osQueuePend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
</UL>

<P><STRONG><a name="[eb]"></a>osQueueWakeUp</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, los_queue.o(i.osQueueWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osQueueWakeUp &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_PriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
</UL>

<P><STRONG><a name="[ce]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>

<P><STRONG><a name="[f1]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>

<P><STRONG><a name="[f0]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>

<P><STRONG><a name="[f2]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>

<P><STRONG><a name="[cd]"></a>LOS_ListTailInsert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_sem.o(i.LOS_ListTailInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
</UL>

<P><STRONG><a name="[d8]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_memory.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSpitNode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFreeNode
</UL>

<P><STRONG><a name="[2e0]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_memory.o(i.LOS_ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSpitNode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFreeNode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>

<P><STRONG><a name="[d1]"></a>osMemAllocWithCheck</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, los_memory.o(i.osMemAllocWithCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMemUsedInc
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSpitNode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSetMagicNumAndTaskid
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFindSuitableFreeBlock
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>

<P><STRONG><a name="[d4]"></a>osMemCheckUsedNode</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, los_memory.o(i.osMemCheckUsedNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = osMemCheckUsedNode &rArr; osMemIsNodeValid
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemIsNodeValid
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[2de]"></a>osMemFindSuitableFreeBlock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, los_memory.o(i.osMemFindSuitableFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMemFindSuitableFreeBlock &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_DLnkMultiHead
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>

<P><STRONG><a name="[d5]"></a>osMemFreeNode</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, los_memory.o(i.osMemFreeNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osMemFreeNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMemUsedDec
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_DLnkMultiHead
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemMergeNode
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[2e2]"></a>osMemIsNodeValid</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, los_memory.o(i.osMemIsNodeValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osMemIsNodeValid
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemCheckUsedNode
</UL>

<P><STRONG><a name="[2e4]"></a>osMemMergeNode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, los_memory.o(i.osMemMergeNode))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSpitNode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemFreeNode
</UL>

<P><STRONG><a name="[d9]"></a>osMemSetMagicNumAndTaskid</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, los_memory.o(i.osMemSetMagicNumAndTaskid))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>

<P><STRONG><a name="[2df]"></a>osMemSpitNode</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, los_memory.o(i.osMemSpitNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_DLnkMultiHead
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemMergeNode
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemAllocWithCheck
</UL>

<P><STRONG><a name="[bb]"></a>LOS_Log2</STRONG> (Thumb, 320 bytes, Stack size 0 bytes, los_multipledlinkhead.o(i.LOS_Log2))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_DLnkMultiHead
</UL>

<P><STRONG><a name="[1e8]"></a>enet_default_init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_default_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_init
</UL>

<P><STRONG><a name="[1e7]"></a>enet_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_delay))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_phy_config
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_init
</UL>

<P><STRONG><a name="[1de]"></a>enet_gpio_config</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, gd32f4xx_enet_eval.o(i.enet_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = enet_gpio_config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ckout0_config
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_enet_phy_interface_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_system_setup
</UL>

<P><STRONG><a name="[1ea]"></a>enet_mac_dma_config</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gd32f4xx_enet_eval.o(i.enet_mac_dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = enet_mac_dma_config &rArr; enet_init &rArr; enet_phy_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_software_reset
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_initpara_config
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_deinit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_system_setup
</UL>

<P><STRONG><a name="[1ef]"></a>nvic_configuration</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32f4xx_enet_eval.o(i.nvic_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nvic_configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_system_setup
</UL>

<P><STRONG><a name="[30b]"></a>system_clock_200m_25m_hxtal</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, system_gd32f4xx.o(i.system_clock_200m_25m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[107]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_200m_25m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[27c]"></a>netconn_recv_data</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; osMessageGet &rArr; LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[1be]"></a>do_close_internal</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, api_msg.o(i.do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[1d3]"></a>do_writemore</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, api_msg.o(i.do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[78]"></a>err_tcp</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.do_close_internal)
</UL>
<P><STRONG><a name="[1c7]"></a>netconn_drain</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[1cd]"></a>pcb_new</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[77]"></a>poll_tcp</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = poll_tcp &rArr; do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.do_close_internal)
</UL>
<P><STRONG><a name="[93]"></a>recv_raw</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, api_msg.o(i.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[98]"></a>recv_tcp</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[94]"></a>recv_udp</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = recv_udp &rArr; sys_mbox_trypost &rArr; osMessagePut &rArr; LOS_QueueWrite &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[76]"></a>sent_tcp</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = sent_tcp &rArr; do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.do_close_internal)
</UL>
<P><STRONG><a name="[2fd]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[137]"></a>alloc_socket</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sockets.o(i.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = alloc_socket &rArr; sys_arch_unprotect
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[7f]"></a>event_callback</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, sockets.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = event_callback &rArr; sys_sem_signal &rArr; LOS_SemPost &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_socket)
</UL>
<P><STRONG><a name="[213]"></a>free_socket</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sockets.o(i.free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[206]"></a>get_socket</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sockets.o(i.get_socket))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[25f]"></a>lwip_selscan</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, sockets.o(i.lwip_selscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = lwip_selscan &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[7e]"></a>lwip_setsockopt_internal</STRONG> (Thumb, 572 bytes, Stack size 48 bytes, sockets.o(i.lwip_setsockopt_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt_internal &rArr; igmp_joingroup &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_setsockopt)
</UL>
<P><STRONG><a name="[260]"></a>tryget_socket</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sockets.o(i.tryget_socket))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>

<P><STRONG><a name="[9b]"></a>tcpip_thread</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[19b]"></a>dhcp_bind</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[1a1]"></a>dhcp_check</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[1a6]"></a>dhcp_create_msg</STRONG> (Thumb, 438 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_random_value
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[19a]"></a>dhcp_decline</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[1af]"></a>dhcp_delete_msg</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[1b1]"></a>dhcp_discover</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[1a8]"></a>dhcp_option</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[1a9]"></a>dhcp_option_byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_byte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[1ab]"></a>dhcp_option_long</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_long &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[1b2]"></a>dhcp_option_short</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_short &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[1ac]"></a>dhcp_option_trailer</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_option_trailer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[1b5]"></a>dhcp_rebind</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[1b6]"></a>dhcp_reboot</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[1ba]"></a>dhcp_select</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[1a0]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[1a5]"></a>dhcp_t1_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t1_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[1a4]"></a>dhcp_t2_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t2_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[1b4]"></a>dhcp_timeout</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = dhcp_timeout &rArr; dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[73]"></a>arp_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip_timers.o(i.arp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwip_timers.o(i.arp_timer)
<LI> lwip_timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[74]"></a>dhcp_timer_coarse</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip_timers.o(i.dhcp_timer_coarse))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = dhcp_timer_coarse &rArr; dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwip_timers.o(i.dhcp_timer_coarse)
<LI> lwip_timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[75]"></a>dhcp_timer_fine</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip_timers.o(i.dhcp_timer_fine))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dhcp_timer_fine &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwip_timers.o(i.dhcp_timer_fine)
<LI> lwip_timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[7b]"></a>igmp_timer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwip_timers.o(i.igmp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = igmp_timer &rArr; igmp_tmr &rArr; igmp_timeout &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwip_timers.o(i.igmp_timer)
<LI> lwip_timers.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[9a]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip_timers.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwip_timers.o(i.tcp_timer_needed)
<LI> lwip_timers.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[270]"></a>plug_holes</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[316]"></a>tcp_close_shutdown</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[312]"></a>tcp_kill_prio</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[311]"></a>tcp_kill_timewait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[314]"></a>tcp_new_port</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[321]"></a>tcp_listen_input</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[325]"></a>tcp_parseopt</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_parseopt &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[322]"></a>tcp_process</STRONG> (Thumb, 1676 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[329]"></a>tcp_receive</STRONG> (Thumb, 2184 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[320]"></a>tcp_timewait_input</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[319]"></a>tcp_create_segment</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[324]"></a>tcp_output_alloc_header</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[327]"></a>tcp_output_segment</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[328]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[331]"></a>tcp_write_checks</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_write_checks &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[332]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[222]"></a>icmp_send_response</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[228]"></a>igmp_delaying_member</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, igmp.o(i.igmp_delaying_member))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = igmp_delaying_member &rArr; igmp_start_timer &rArr; oc_random_value
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</UL>

<P><STRONG><a name="[22c]"></a>igmp_ip_output_if</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, igmp.o(i.igmp_ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = igmp_ip_output_if &rArr; ip_output_if_opt &rArr; pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>

<P><STRONG><a name="[22f]"></a>igmp_lookup_group</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, igmp.o(i.igmp_lookup_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = igmp_lookup_group &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
</UL>

<P><STRONG><a name="[232]"></a>igmp_remove_group</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, igmp.o(i.igmp_remove_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = igmp_remove_group &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>

<P><STRONG><a name="[230]"></a>igmp_send</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, igmp.o(i.igmp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = igmp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>

<P><STRONG><a name="[229]"></a>igmp_start_timer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, igmp.o(i.igmp_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = igmp_start_timer &rArr; oc_random_value
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_random_value
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>

<P><STRONG><a name="[237]"></a>igmp_timeout</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, igmp.o(i.igmp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = igmp_timeout &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>

<P><STRONG><a name="[239]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[1f4]"></a>etharp_arp_input</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[1f8]"></a>etharp_find_entry</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[1f7]"></a>etharp_free_entry</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[1fb]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[200]"></a>etharp_raw</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[1fc]"></a>etharp_send_ip</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = etharp_send_ip &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[1f5]"></a>etharp_update_arp_entry</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[203]"></a>low_level_init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = low_level_init &rArr; sys_thread_new &rArr; osThreadCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_transmit_checksum_config
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_rx_desc_immediate_receive_complete_interrupt
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_address_set
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_enable
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_descriptors_chain_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[205]"></a>low_level_input</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_frame_receive
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_desc_information_get
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[7a]"></a>low_level_output</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = low_level_output &rArr; sys_arch_sem_wait &rArr; LOS_SemPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_frame_transmit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_desc_information_get
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[308]"></a>get_prio</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sys_arch.o(i.get_prio))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[6]"></a>process_thread_message_buffer_handler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, oc_buffer.o(i.process_thread_message_buffer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = process_thread_message_buffer_handler &rArr; oc_send_buffer &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_buffer
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_post
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_message_unref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oc_buffer.o(.data)
</UL>
<P><STRONG><a name="[20d]"></a>finalize_payload</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, oc_core_res.o(i.finalize_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = finalize_payload &rArr; oc_alloc_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_rep_finalize
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free_string
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_alloc_string
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_close_container
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_init_platform
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_add_new_device
</UL>

<P><STRONG><a name="[8b]"></a>oc_core_device_handler</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, oc_core_res.o(i.oc_core_device_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = oc_core_device_handler &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_status_code
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oc_core_res.o(i.oc_core_add_new_device)
</UL>
<P><STRONG><a name="[20a]"></a>filter_resource</STRONG> (Thumb, 476 bytes, Stack size 72 bytes, oc_discovery.o(i.filter_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = filter_resource &rArr; oc_core_encode_interfaces_mask &rArr; cbor_encode_text_string &rArr; encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_uint
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_map
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_array
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_close_container
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_text_string
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_encode_interfaces_mask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_device_object
</UL>

<P><STRONG><a name="[8d]"></a>oc_core_discovery_handler</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, oc_discovery.o(i.oc_core_discovery_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = oc_core_discovery_handler &rArr; process_device_object &rArr; filter_resource &rArr; oc_core_encode_interfaces_mask &rArr; cbor_encode_text_string &rArr; encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_get_query_value
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_device_object
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_status_code
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_rep_finalize
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_array
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_close_container
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_get_num_devices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oc_discovery.o(i.oc_create_discovery_resource)
</UL>
<P><STRONG><a name="[28d]"></a>process_device_object</STRONG> (Thumb, 452 bytes, Stack size 112 bytes, oc_discovery.o(i.process_device_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = process_device_object &rArr; filter_resource &rArr; oc_core_encode_interfaces_mask &rArr; cbor_encode_text_string &rArr; encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_get_app_resources
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_resource
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_uuid_to_str
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_map
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_array
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_close_container
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_text_string
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_get_resource_by_index
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_get_device_id
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_encode_interfaces_mask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_core_discovery_handler
</UL>

<P><STRONG><a name="[11e]"></a>oc_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, oc_helpers.o(i.oc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = oc_free &rArr; oc_mmem_free &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_mmem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_free_array
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free_string
</UL>

<P><STRONG><a name="[120]"></a>oc_malloc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oc_helpers.o(i.oc_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_mmem_init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_mmem_alloc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_new_array
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_new_string
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_alloc_string
</UL>

<P><STRONG><a name="[2af]"></a>oc_process_network_event</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oc_network_events.o(i.oc_process_network_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = oc_process_network_event &rArr; oc_recv_message &rArr; oc_process_post &rArr; oc_message_unref &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_recv_message
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_network_event_handler_mutex_unlock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_network_event_handler_mutex_lock
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_oc_network_events
</UL>

<P><STRONG><a name="[7]"></a>process_thread_oc_network_events</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, oc_network_events.o(i.process_thread_oc_network_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = process_thread_oc_network_events &rArr; oc_process_network_event &rArr; oc_recv_message &rArr; oc_process_post &rArr; oc_message_unref &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_is_running
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_network_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oc_network_events.o(.data)
</UL>
<P><STRONG><a name="[10b]"></a>_alloc_rep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oc_rep.o(i._alloc_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _alloc_rep
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
</UL>

<P><STRONG><a name="[113]"></a>_cbor_value_extract_int64_helper</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, oc_rep.o(i._cbor_value_extract_int64_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _cbor_value_extract_int64_helper &rArr; _cbor_value_decode_int64_internal &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_decode_int64_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_get_int
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_get_array_length
</UL>

<P><STRONG><a name="[116]"></a>_free_rep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oc_rep.o(i._free_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _free_rep &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free_rep
</UL>

<P><STRONG><a name="[2ad]"></a>cbor_value_at_end</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oc_rep.o(i.cbor_value_at_end))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
</UL>

<P><STRONG><a name="[153]"></a>cbor_value_copy_byte_string</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, oc_rep.o(i.cbor_value_copy_byte_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cbor_value_copy_byte_string &rArr; _cbor_value_copy_string &rArr; iterate_string_chunks &rArr; extract_length &rArr; extract_number &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_copy_string
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
</UL>

<P><STRONG><a name="[154]"></a>cbor_value_copy_text_string</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, oc_rep.o(i.cbor_value_copy_text_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cbor_value_copy_text_string &rArr; _cbor_value_copy_string &rArr; iterate_string_chunks &rArr; extract_length &rArr; extract_number &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_copy_string
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
</UL>

<P><STRONG><a name="[155]"></a>cbor_value_get_array_length</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, oc_rep.o(i.cbor_value_get_array_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cbor_value_get_array_length &rArr; _cbor_value_extract_int64_helper &rArr; _cbor_value_decode_int64_internal &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_is_array
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_extract_int64_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
</UL>

<P><STRONG><a name="[157]"></a>cbor_value_get_boolean</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oc_rep.o(i.cbor_value_get_boolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cbor_value_get_boolean
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
</UL>

<P><STRONG><a name="[158]"></a>cbor_value_get_double</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, oc_rep.o(i.cbor_value_get_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cbor_value_get_double &rArr; _cbor_value_decode_int64_internal &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_decode_int64_internal
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
</UL>

<P><STRONG><a name="[159]"></a>cbor_value_get_int</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, oc_rep.o(i.cbor_value_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cbor_value_get_int &rArr; _cbor_value_extract_int64_helper &rArr; _cbor_value_decode_int64_internal &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_extract_int64_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
</UL>

<P><STRONG><a name="[156]"></a>cbor_value_is_array</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, oc_rep.o(i.cbor_value_is_array))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_get_array_length
</UL>

<P><STRONG><a name="[2ac]"></a>cbor_value_is_valid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, oc_rep.o(i.cbor_value_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep
</UL>

<P><STRONG><a name="[2ab]"></a>oc_parse_rep_value</STRONG> (Thumb, 920 bytes, Stack size 88 bytes, oc_rep.o(i.oc_parse_rep_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + In Cycle
<LI>Call Chain = oc_parse_rep_value &rArr;  oc_parse_rep_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_enter_container
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_calculate_string_length
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_advance
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_get_int
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_get_double
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_get_boolean
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_get_array_length
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_copy_text_string
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_copy_byte_string
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_at_end
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_rep
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_new_array
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_alloc_string
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_alloc_string_array
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_parse_rep_value
</UL>

<P><STRONG><a name="[128]"></a>add_periodic_observe_callback</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, oc_ri.o(i.add_periodic_observe_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = add_periodic_observe_callback &rArr; oc_etimer_set &rArr; add_timer &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_alloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_set
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_periodic_observe_callback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[13a]"></a>allocate_events</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oc_ri.o(i.allocate_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = allocate_events
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_alloc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_processes
</UL>

<P><STRONG><a name="[15a]"></a>check_event_callbacks</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oc_ri.o(i.check_event_callbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = check_event_callbacks &rArr; poll_event_callback_timers &rArr; oc_etimer_restart &rArr; add_timer &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_event_callback_timers
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_timed_callback_events
</UL>

<P><STRONG><a name="[2c6]"></a>does_interface_support_method</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, oc_ri.o(i.does_interface_support_method))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[129]"></a>get_periodic_observe_callback</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, oc_ri.o(i.get_periodic_observe_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_periodic_observe_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_periodic_observe_callback
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_periodic_observe_callback
</UL>

<P><STRONG><a name="[8e]"></a>oc_observe_notification_delayed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oc_ri.o(i.oc_observe_notification_delayed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = oc_observe_notification_delayed &rArr; coap_notify_observers &rArr; coap_separate_accept &rArr; coap_serialize_message &rArr; coap_serialize_array_option &rArr; coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oc_ri.o(i.oc_ri_invoke_coap_entity_handler)
</UL>
<P><STRONG><a name="[72]"></a>periodic_observe_handler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, oc_ri.o(i.periodic_observe_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = periodic_observe_handler &rArr; coap_notify_observers &rArr; coap_separate_accept &rArr; coap_serialize_message &rArr; coap_serialize_array_option &rArr; coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_notify_observers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oc_ri.o(i.add_periodic_observe_callback)
</UL>
<P><STRONG><a name="[15b]"></a>poll_event_callback_timers</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, oc_ri.o(i.poll_event_callback_timers))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = poll_event_callback_timers &rArr; oc_etimer_restart &rArr; add_timer &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_free
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_remove
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_head
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_restart
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_callbacks
</UL>

<P><STRONG><a name="[8]"></a>process_thread_timed_callback_events</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, oc_ri.o(i.process_thread_timed_callback_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = process_thread_timed_callback_events &rArr; check_event_callbacks &rArr; poll_event_callback_timers &rArr; oc_etimer_restart &rArr; add_timer &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_callbacks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oc_ri.o(.data)
</UL>
<P><STRONG><a name="[2c8]"></a>remove_periodic_observe_callback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, oc_ri.o(i.remove_periodic_observe_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = remove_periodic_observe_callback &rArr; oc_etimer_stop &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_free
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_remove
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_stop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_periodic_observe_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_invoke_coap_entity_handler
</UL>

<P><STRONG><a name="[2c0]"></a>set_mpro_status_codes</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, oc_ri.o(i.set_mpro_status_codes))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_init
</UL>

<P><STRONG><a name="[2c1]"></a>start_processes</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, oc_ri.o(i.start_processes))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = start_processes &rArr; oc_process_start &rArr; oc_process_post_synch &rArr; call_process &rArr;  exit_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_start
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_events
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_init
</UL>

<P><STRONG><a name="[2cb]"></a>stop_processes</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oc_ri.o(i.stop_processes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stop_processes &rArr; oc_process_exit &rArr; exit_process &rArr; call_process &rArr;  exit_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_ri_shutdown
</UL>

<P><STRONG><a name="[2a9]"></a>oc_populate_resource_object</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, oc_server_api.o(i.oc_populate_resource_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = oc_populate_resource_object &rArr; _oc_alloc_string_array &rArr; oc_alloc_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_oc_alloc_string_array
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_store_uri
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_new_resource
</UL>

<P><STRONG><a name="[2ce]"></a>response_length</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, oc_server_api.o(i.response_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = response_length
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_rep_finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_response
</UL>

<P><STRONG><a name="[9c]"></a>app_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, simpleserver.o(i.app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = app_init &rArr; oc_add_device &rArr; oc_core_add_new_device &rArr; oc_core_encode_interfaces_mask &rArr; cbor_encode_text_string &rArr; encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_new_string
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_init_platform
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_add_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simpleserver.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>get_light</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, simpleserver.o(i.get_light))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = get_light &rArr; oc_process_baseline_interface &rArr; oc_core_encode_interfaces_mask &rArr; cbor_encode_text_string &rArr; encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_map
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_close_container
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_text_string
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_simple_value
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_int
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_response
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_baseline_interface
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simpleserver.o(i.register_resources)
</UL>
<P><STRONG><a name="[97]"></a>post_light</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, simpleserver.o(i.post_light))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = post_light &rArr; oc_new_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_new_string
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_free_string
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_send_response
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_light
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simpleserver.o(i.register_resources)
</UL>
<P><STRONG><a name="[96]"></a>put_light</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, simpleserver.o(i.put_light))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = put_light &rArr; post_light &rArr; oc_new_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_light
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simpleserver.o(i.register_resources)
</UL>
<P><STRONG><a name="[9e]"></a>register_resources</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, simpleserver.o(i.register_resources))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = register_resources &rArr; oc_new_resource &rArr; oc_populate_resource_object &rArr; _oc_alloc_string_array &rArr; oc_alloc_string &rArr; oc_malloc &rArr; oc_mmem_alloc &rArr; oc_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_resource_set_request_handler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_resource_set_periodic_observable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_resource_set_discoverable
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_resource_set_default_interface
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_resource_bind_resource_type
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_resource_bind_resource_interface
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_new_resource
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_add_resource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simpleserver.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>signal_event_loop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, simpleserver.o(i.signal_event_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = signal_event_loop &rArr; LOS_MuxPend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_EventWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simpleserver.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>coap_log_2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, coap_1.o(i.coap_log_2))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
</UL>

<P><STRONG><a name="[169]"></a>coap_merge_multi_option</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, coap_1.o(i.coap_merge_multi_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = coap_merge_multi_option &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_message
</UL>

<P><STRONG><a name="[190]"></a>coap_option_nibble</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, coap_1.o(i.coap_option_nibble))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_option_header
</UL>

<P><STRONG><a name="[17c]"></a>coap_parse_int_option</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, coap_1.o(i.coap_parse_int_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = coap_parse_int_option
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_parse_message
</UL>

<P><STRONG><a name="[18c]"></a>coap_serialize_array_option</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, coap_1.o(i.coap_serialize_array_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = coap_serialize_array_option &rArr; coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_option_header
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
</UL>

<P><STRONG><a name="[18e]"></a>coap_serialize_int_option</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, coap_1.o(i.coap_serialize_int_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = coap_serialize_int_option &rArr; coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_set_option_header
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_message
</UL>

<P><STRONG><a name="[18d]"></a>coap_set_option_header</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, coap_1.o(i.coap_set_option_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = coap_set_option_header
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_option_nibble
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_int_option
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_serialize_array_option
</UL>

<P><STRONG><a name="[9]"></a>process_thread_coap_engine</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, engine.o(i.process_thread_coap_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = process_thread_coap_engine &rArr; coap_receive &rArr; oc_ri_invoke_coap_entity_handler &rArr; oc_parse_rep &rArr; oc_parse_rep_value &rArr;  oc_parse_rep_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_message_unref
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_register_as_transaction_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_check_transactions
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_receive
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_init_connection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> engine.o(.data)
</UL>
<P><STRONG><a name="[125]"></a>add_observer</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, observe.o(i.add_observer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = add_observer &rArr; coap_remove_observer_handle_by_uri &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_alloc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_add
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_remove_observer_handle_by_uri
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coap_observe_handler
</UL>

<P><STRONG><a name="[126]"></a>coap_remove_observer_handle_by_uri</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, observe.o(i.coap_remove_observer_handle_by_uri))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = coap_remove_observer_handle_by_uri &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_memb_free
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_remove
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_list_head
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_observer
</UL>

<P><STRONG><a name="[12b]"></a>add_timer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, oc_etimer.o(i.add_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = add_timer &rArr; update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_request_poll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_restart
</UL>

<P><STRONG><a name="[a]"></a>process_thread_oc_etimer_process</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, oc_etimer.o(i.process_thread_oc_etimer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = process_thread_oc_etimer_process &rArr; oc_process_post &rArr; oc_message_unref &rArr; oc_memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_post
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_request_poll
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_timer_expired
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oc_etimer.o(.data)
</UL>
<P><STRONG><a name="[12d]"></a>update_time</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, oc_etimer.o(i.update_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = update_time &rArr; oc_clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_etimer_stop
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_oc_etimer_process
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>

<P><STRONG><a name="[143]"></a>call_process</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, oc_process.o(i.call_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = call_process &rArr;  exit_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_post_synch
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
</UL>

<P><STRONG><a name="[1cb]"></a>do_event</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, oc_process.o(i.do_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = do_event &rArr; do_poll &rArr; call_process &rArr;  exit_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_run
</UL>

<P><STRONG><a name="[1cc]"></a>do_poll</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oc_process.o(i.do_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = do_poll &rArr; call_process &rArr;  exit_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_run
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
</UL>

<P><STRONG><a name="[144]"></a>exit_process</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, oc_process.o(i.exit_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = exit_process &rArr; call_process &rArr;  exit_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_is_running
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_process_exit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>

<P><STRONG><a name="[13f]"></a>append_byte_to_buffer</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cborencoder.o(i.append_byte_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = append_byte_to_buffer &rArr; append_to_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_close_container
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_container
</UL>

<P><STRONG><a name="[140]"></a>append_to_buffer</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, cborencoder.o(i.append_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = append_to_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_string
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_number_no_update
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_byte_to_buffer
</UL>

<P><STRONG><a name="[14d]"></a>create_container</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cborencoder.o(i.create_container))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = create_container &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_number_no_update
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_byte_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_map
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encoder_create_array
</UL>

<P><STRONG><a name="[146]"></a>encode_number</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, cborencoder.o(i.encode_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_number_no_update
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_uint
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_simple_value
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_int
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_string
</UL>

<P><STRONG><a name="[197]"></a>encode_number_no_update</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, cborencoder.o(i.encode_number_no_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put64
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_number
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_container
</UL>

<P><STRONG><a name="[149]"></a>encode_string</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, cborencoder.o(i.encode_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = encode_string &rArr; encode_number &rArr; encode_number_no_update &rArr; put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_number
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_encode_text_string
</UL>

<P><STRONG><a name="[1d6]"></a>put64</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cborencoder.o(i.put64))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = put64 &rArr; htonll
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonll
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_number_no_update
</UL>

<P><STRONG><a name="[12e]"></a>advance_internal</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cborparser.o(i.advance_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = advance_internal &rArr; extract_number &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparse_next_value
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_number
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_recursive
</UL>

<P><STRONG><a name="[131]"></a>advance_recursive</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, cborparser.o(i.advance_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = advance_recursive &rArr;  advance_recursive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_enter_container
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_copy_string
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_leave_container
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_fixed_type
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_is_container
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_at_end
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_recursive
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_advance
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_recursive
</UL>

<P><STRONG><a name="[135]"></a>cbor_value_at_end</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cborparser.o(i.cbor_value_at_end))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_recursive
</UL>

<P><STRONG><a name="[133]"></a>cbor_value_is_container</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cborparser.o(i.cbor_value_is_container))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_enter_container
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_leave_container
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_recursive
</UL>

<P><STRONG><a name="[240]"></a>cbor_value_is_text_string</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cborparser.o(i.cbor_value_is_text_string))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterate_string_chunks
</UL>

<P><STRONG><a name="[208]"></a>extract_length</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, cborparser.o(i.extract_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = extract_length &rArr; extract_number &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_number
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterate_string_chunks
</UL>

<P><STRONG><a name="[12f]"></a>extract_number</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, cborparser.o(i.extract_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = extract_number &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get64
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get32
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get16
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_enter_container
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_length
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_internal
</UL>

<P><STRONG><a name="[209]"></a>get16</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cborparser.o(i.get16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get16 &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparse_value
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_number
</UL>

<P><STRONG><a name="[111]"></a>get32</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, cborparser.o(i.get32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get32 &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_decode_int64_internal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_number
</UL>

<P><STRONG><a name="[112]"></a>get64</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cborparser.o(i.get64))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohll
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_decode_int64_internal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_number
</UL>

<P><STRONG><a name="[132]"></a>is_fixed_type</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cborparser.o(i.is_fixed_type))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparse_value
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_recursive
</UL>

<P><STRONG><a name="[71]"></a>iterate_noop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cborparser.o(i.iterate_noop))
<BR>[Address Reference Count : 1]<UL><LI> cborparser.o(i._cbor_value_copy_string)
</UL>
<P><STRONG><a name="[10e]"></a>iterate_string_chunks</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, cborparser.o(i.iterate_string_chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = iterate_string_chunks &rArr; extract_length &rArr; extract_number &rArr; get64 &rArr; ntohll &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparse_next_value
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_length
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_is_text_string
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbor_value_copy_string
</UL>

<P><STRONG><a name="[130]"></a>preparse_next_value</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, cborparser.o(i.preparse_next_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = preparse_next_value &rArr; preparse_value &rArr; get16 &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparse_value
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_leave_container
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterate_string_chunks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_internal
</UL>

<P><STRONG><a name="[150]"></a>preparse_value</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, cborparser.o(i.preparse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = preparse_value &rArr; get16 &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_fixed_type
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get16
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_value_enter_container
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbor_parser_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparse_next_value
</UL>

<P><STRONG><a name="[191]"></a>connectivity_ipv4_init</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, ipadapter.o(i.connectivity_ipv4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = connectivity_ipv4_init &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; osMessageCreate &rArr; LOS_QueueCreate &rArr; osQueueCreate &rArr; LOS_MemAlloc &rArr; osMemAllocWithCheck &rArr; osMemSpitNode &rArr; LOS_DLnkMultiHead
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_connectivity_init
</UL>

<P><STRONG><a name="[8a]"></a>network_event_thread</STRONG> (Thumb, 544 bytes, Stack size 96 bytes, ipadapter.o(i.network_event_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = network_event_thread &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; sys_arch_mbox_fetch &rArr; osMessageGet &rArr; LOS_QueueRead &rArr; osQueuePend &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_allocate_message
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oc_network_event
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipadapter.o(i.oc_connectivity_init)
</UL>
<P><STRONG><a name="[114]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[109]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[123]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[122]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6f]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
